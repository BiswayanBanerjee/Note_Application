{"ast":null,"code":"var _jsxFileName = \"D:\\\\Study\\\\Code\\\\Self-Projects\\\\NoteApp\\\\note-taking-frontend\\\\src\\\\components\\\\Auth\\\\Login.tsx\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import {\n//   Container,\n//   Grid,\n//   Typography,\n//   Box,\n//   TextField,\n//   Button,\n//   InputAdornment,\n//   IconButton,\n// } from \"@mui/material\";\n// import { Visibility, VisibilityOff } from \"@mui/icons-material\";\n// import { Formik, Form, Field } from \"formik\";\n// import * as Yup from \"yup\";\n// import api from \"../../services/api\";\n\n// const Login: React.FC = () => {\n//   const [showPassword, setShowPassword] = useState(false);\n//   const [loginWithOtp, setLoginWithOtp] = useState(false);\n\n//   const initialValues = loginWithOtp\n//     ? { email: \"\", otp: \"\" }\n//     : { email: \"\", password: \"\" };\n\n//   const validationSchema = Yup.object(\n//     loginWithOtp\n//       ? {\n//           email: Yup.string().email(\"Invalid email\").required(\"Required\"),\n//           otp: Yup.string().required(\"OTP is required\"),\n//         }\n//       : {\n//           email: Yup.string().email(\"Invalid email\").required(\"Required\"),\n//           password: Yup.string().required(\"Password is required\"),\n//         }\n//   );\n\n//   const handleSubmit = async (values: typeof initialValues) => {\n//     try {\n//       if (loginWithOtp) {\n//         const response = await api.post(\"/auth/verify-otp\", {\n//           email: values.email,\n//           otp: values.otp,\n//         });\n//         alert(response.data.message);\n//       } else {\n//         const response = await api.post(\"/auth/login\", {\n//           email: values.email,\n//           password: values.password,\n//         });\n//         localStorage.setItem(\"token\", response.data.token);\n//         window.location.href = \"/notes\";\n//       }\n//     } catch (error: any) {\n//       alert(error.response?.data?.message || \"Login failed\");\n//     }\n//   };\n\n//   return (\n//     <Container\n//       maxWidth={false}\n//       sx={{\n//         height: \"100vh\",\n//         display: \"flex\",\n//         alignItems: \"center\",\n//         justifyContent: \"center\",\n//       }}\n//     >\n//       <Grid\n//         container\n//         spacing={2}\n//         sx={{\n//           height: \"100%\",\n//           boxShadow: 3,\n//           borderRadius: 3,\n//           overflow: \"hidden\",\n//         }}\n//       >\n//         {/* Left Side - Image */}\n//         <Grid\n//           item\n//           xs={12}\n//           md={6}\n//           sx={{\n//             backgroundImage: \"url('/assets/images/signup-bg.png')\",\n//             backgroundSize: \"cover\",\n//             backgroundPosition: \"center\",\n//           }}\n//         ></Grid>\n\n//         {/* Right Side - Login Form */}\n//         <Grid item xs={12} md={6} sx={{ padding: 4 }}>\n//           <Box sx={{ padding: 8 }}>\n//             <Typography variant=\"h4\" fontWeight=\"bold\" gutterBottom>\n//               Login\n//             </Typography>\n//             <Typography variant=\"body1\" color=\"text.secondary\" mb={4}>\n//               Login to continue to HD\n//             </Typography>\n\n//             <Formik\n//               initialValues={initialValues}\n//               validationSchema={validationSchema}\n//               onSubmit={handleSubmit}\n//             >\n//               {({ errors, touched }) => (\n//                 <Form>\n//                   <Field\n//                     name=\"email\"\n//                     as={TextField}\n//                     label=\"Email\"\n//                     fullWidth\n//                     margin=\"normal\"\n//                     variant=\"outlined\"\n//                     error={touched.email && !!errors.email}\n//                     helperText={touched.email && errors.email}\n//                   />\n\n//                   {loginWithOtp ? (\n//                     <Field\n//                       name=\"otp\"\n//                       as={TextField}\n//                       label=\"OTP\"\n//                       fullWidth\n//                       margin=\"normal\"\n//                       variant=\"outlined\"\n//                       error={touched.otp && !!errors.otp}\n//                       helperText={touched.otp && errors.otp}\n//                     />\n//                   ) : (\n//                     <Field\n//                       name=\"password\"\n//                       as={TextField}\n//                       label=\"Password\"\n//                       type={showPassword ? \"text\" : \"password\"}\n//                       fullWidth\n//                       margin=\"normal\"\n//                       variant=\"outlined\"\n//                       error={touched.password && !!errors.password}\n//                       helperText={touched.password && errors.password}\n//                       InputProps={{\n//                         endAdornment: (\n//                           <InputAdornment position=\"end\">\n//                             <IconButton\n//                               onClick={() => setShowPassword(!showPassword)}\n//                             >\n//                               {showPassword ? <VisibilityOff /> : <Visibility />}\n//                             </IconButton>\n//                           </InputAdornment>\n//                         ),\n//                       }}\n//                     />\n//                   )}\n\n//                   <Button\n//                     type=\"submit\"\n//                     variant=\"contained\"\n//                     fullWidth\n//                     sx={{ marginY: 2, paddingY: 1.5, backgroundColor: \"#367AFF\" }}\n//                   >\n//                     {loginWithOtp ? \"Login with OTP\" : \"Login\"}\n//                   </Button>\n\n//                   <Typography\n//                     variant=\"body2\"\n//                     align=\"center\"\n//                     sx={{ cursor: \"pointer\", color: \"#367AFF\" }}\n//                     onClick={() => setLoginWithOtp(!loginWithOtp)}\n//                   >\n//                     {loginWithOtp\n//                       ? \"Login with Password instead\"\n//                       : \"Login with OTP instead\"}\n//                   </Typography>\n//                 </Form>\n//               )}\n//             </Formik>\n//           </Box>\n//         </Grid>\n//       </Grid>\n//     </Container>\n//   );\n// };\n\n// export default Login;\n\nimport React, { useState } from \"react\";\nimport { Container, Grid, Box, TextField, Button, Typography, InputAdornment, IconButton } from \"@mui/material\";\nimport { Visibility, VisibilityOff } from \"@mui/icons-material\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport api from \"../../services/api\"; // Importing the API service\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = () => {\n  _s();\n  const [showPassword, setShowPassword] = useState(false);\n  const [useOtp, setUseOtp] = useState(false);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const navigate = useNavigate();\n  const validationSchema = Yup.object({\n    email: Yup.string().email(\"Invalid email\").required(\"Required\"),\n    password: Yup.string().when(\"useOtp\", {\n      is: false,\n      then: Yup.string().required(\"Required\")\n    }),\n    otp: Yup.string().when(\"useOtp\", {\n      is: true,\n      then: Yup.string().required(\"Required\")\n    })\n  });\n  const handleVerifyOtp = async () => {\n    try {\n      const {\n        email,\n        otp\n      } = formik.values;\n\n      // API call to verify OTP\n      const response = await api.post(\"/auth/verify-otp\", {\n        email,\n        otp\n      });\n      alert(response.data.message); // \"User registered successfully\"\n      // Set login state and redirect\n      setIsLoggedIn(true);\n      navigate(\"/notes\"); // Navigate to the notes page\n    } catch (error) {\n      var _error$response, _error$response$data;\n      alert(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || \"Invalid OTP\");\n    }\n  };\n  const handleLogin = async () => {\n    try {\n      const {\n        email,\n        password\n      } = formik.values;\n\n      // API call to login with email and password\n      const response = await api.post(\"/auth/login\", {\n        email,\n        password\n      });\n      alert(response.data.message); // \"Login successful\"\n      // Set login state and redirect\n      setIsLoggedIn(true);\n      navigate(\"/notes\"); // Navigate to the notes page\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      alert(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || \"Invalid credentials\");\n    }\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    if (useOtp) {\n      await handleVerifyOtp();\n    } else {\n      await handleLogin();\n    }\n  };\n  const formik = useFormik({\n    initialValues: {\n      email: \"\",\n      password: \"\",\n      otp: \"\"\n    },\n    validationSchema,\n    onSubmit: handleSubmit\n  });\n  const handleToggleLoginMethod = () => {\n    setUseOtp(!useOtp);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: false,\n    sx: {\n      height: \"100vh\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\"\n    },\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      sx: {\n        height: \"100%\",\n        padding: 0,\n        boxShadow: 3,\n        borderRadius: 3,\n        overflow: \"hidden\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        sx: {\n          padding: 4\n        },\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          component: \"form\",\n          noValidate: true,\n          autoComplete: \"off\",\n          onSubmit: formik.handleSubmit,\n          sx: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            alignItems: \"flex-start\",\n            gap: \"20px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            label: \"Email\",\n            name: \"email\",\n            fullWidth: true,\n            margin: \"normal\",\n            variant: \"outlined\",\n            value: formik.values.email,\n            onChange: formik.handleChange,\n            error: formik.touched.email && Boolean(formik.errors.email),\n            helperText: formik.touched.email && formik.errors.email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 13\n          }, this), !useOtp && /*#__PURE__*/_jsxDEV(TextField, {\n            label: \"Password\",\n            name: \"password\",\n            type: showPassword ? \"text\" : \"password\",\n            fullWidth: true,\n            margin: \"normal\",\n            variant: \"outlined\",\n            value: formik.values.password,\n            onChange: formik.handleChange,\n            error: formik.touched.password && Boolean(formik.errors.password),\n            helperText: formik.touched.password && formik.errors.password,\n            InputProps: {\n              endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n                position: \"end\",\n                children: /*#__PURE__*/_jsxDEV(IconButton, {\n                  onClick: () => setShowPassword(!showPassword),\n                  children: showPassword ? /*#__PURE__*/_jsxDEV(VisibilityOff, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 335,\n                    columnNumber: 41\n                  }, this) : /*#__PURE__*/_jsxDEV(Visibility, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 335,\n                    columnNumber: 61\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 334,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 333,\n                columnNumber: 21\n              }, this)\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 15\n          }, this), useOtp && /*#__PURE__*/_jsxDEV(TextField, {\n            label: \"OTP\",\n            name: \"otp\",\n            fullWidth: true,\n            margin: \"normal\",\n            variant: \"outlined\",\n            value: formik.values.otp,\n            onChange: formik.handleChange,\n            error: formik.touched.otp && Boolean(formik.errors.otp),\n            helperText: formik.touched.otp && formik.errors.otp\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 343,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            variant: \"contained\",\n            fullWidth: true,\n            sx: {\n              marginY: 2,\n              paddingY: 1.5,\n              backgroundColor: \"#367AFF\",\n              borderRadius: \"10px\"\n            },\n            children: useOtp ? \"Verify OTP\" : \"Login\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          align: \"center\",\n          variant: \"body2\",\n          sx: {\n            cursor: \"pointer\"\n          },\n          onClick: handleToggleLoginMethod,\n          children: useOtp ? \"Login with Password\" : \"Login with OTP\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 274,\n    columnNumber: 5\n  }, this);\n};\n_s(Login, \"7fjngYabREu0orIP6jObDPFCUF4=\", false, function () {\n  return [useNavigate, useFormik];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","Container","Grid","Box","TextField","Button","Typography","InputAdornment","IconButton","Visibility","VisibilityOff","useNavigate","useFormik","Yup","api","jsxDEV","_jsxDEV","Login","_s","showPassword","setShowPassword","useOtp","setUseOtp","isLoggedIn","setIsLoggedIn","navigate","validationSchema","object","email","string","required","password","when","is","then","otp","handleVerifyOtp","formik","values","response","post","alert","data","message","error","_error$response","_error$response$data","handleLogin","_error$response2","_error$response2$data","handleSubmit","event","preventDefault","initialValues","onSubmit","handleToggleLoginMethod","maxWidth","sx","height","display","alignItems","justifyContent","children","container","spacing","padding","boxShadow","borderRadius","overflow","item","xs","md","component","noValidate","autoComplete","flexDirection","gap","label","name","fullWidth","margin","variant","value","onChange","handleChange","touched","Boolean","errors","helperText","fileName","_jsxFileName","lineNumber","columnNumber","type","InputProps","endAdornment","position","onClick","marginY","paddingY","backgroundColor","align","cursor","_c","$RefreshReg$"],"sources":["D:/Study/Code/Self-Projects/NoteApp/note-taking-frontend/src/components/Auth/Login.tsx"],"sourcesContent":["// import React, { useState } from \"react\";\r\n// import {\r\n//   Container,\r\n//   Grid,\r\n//   Typography,\r\n//   Box,\r\n//   TextField,\r\n//   Button,\r\n//   InputAdornment,\r\n//   IconButton,\r\n// } from \"@mui/material\";\r\n// import { Visibility, VisibilityOff } from \"@mui/icons-material\";\r\n// import { Formik, Form, Field } from \"formik\";\r\n// import * as Yup from \"yup\";\r\n// import api from \"../../services/api\";\r\n\r\n// const Login: React.FC = () => {\r\n//   const [showPassword, setShowPassword] = useState(false);\r\n//   const [loginWithOtp, setLoginWithOtp] = useState(false);\r\n\r\n//   const initialValues = loginWithOtp\r\n//     ? { email: \"\", otp: \"\" }\r\n//     : { email: \"\", password: \"\" };\r\n\r\n//   const validationSchema = Yup.object(\r\n//     loginWithOtp\r\n//       ? {\r\n//           email: Yup.string().email(\"Invalid email\").required(\"Required\"),\r\n//           otp: Yup.string().required(\"OTP is required\"),\r\n//         }\r\n//       : {\r\n//           email: Yup.string().email(\"Invalid email\").required(\"Required\"),\r\n//           password: Yup.string().required(\"Password is required\"),\r\n//         }\r\n//   );\r\n\r\n//   const handleSubmit = async (values: typeof initialValues) => {\r\n//     try {\r\n//       if (loginWithOtp) {\r\n//         const response = await api.post(\"/auth/verify-otp\", {\r\n//           email: values.email,\r\n//           otp: values.otp,\r\n//         });\r\n//         alert(response.data.message);\r\n//       } else {\r\n//         const response = await api.post(\"/auth/login\", {\r\n//           email: values.email,\r\n//           password: values.password,\r\n//         });\r\n//         localStorage.setItem(\"token\", response.data.token);\r\n//         window.location.href = \"/notes\";\r\n//       }\r\n//     } catch (error: any) {\r\n//       alert(error.response?.data?.message || \"Login failed\");\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <Container\r\n//       maxWidth={false}\r\n//       sx={{\r\n//         height: \"100vh\",\r\n//         display: \"flex\",\r\n//         alignItems: \"center\",\r\n//         justifyContent: \"center\",\r\n//       }}\r\n//     >\r\n//       <Grid\r\n//         container\r\n//         spacing={2}\r\n//         sx={{\r\n//           height: \"100%\",\r\n//           boxShadow: 3,\r\n//           borderRadius: 3,\r\n//           overflow: \"hidden\",\r\n//         }}\r\n//       >\r\n//         {/* Left Side - Image */}\r\n//         <Grid\r\n//           item\r\n//           xs={12}\r\n//           md={6}\r\n//           sx={{\r\n//             backgroundImage: \"url('/assets/images/signup-bg.png')\",\r\n//             backgroundSize: \"cover\",\r\n//             backgroundPosition: \"center\",\r\n//           }}\r\n//         ></Grid>\r\n\r\n//         {/* Right Side - Login Form */}\r\n//         <Grid item xs={12} md={6} sx={{ padding: 4 }}>\r\n//           <Box sx={{ padding: 8 }}>\r\n//             <Typography variant=\"h4\" fontWeight=\"bold\" gutterBottom>\r\n//               Login\r\n//             </Typography>\r\n//             <Typography variant=\"body1\" color=\"text.secondary\" mb={4}>\r\n//               Login to continue to HD\r\n//             </Typography>\r\n\r\n//             <Formik\r\n//               initialValues={initialValues}\r\n//               validationSchema={validationSchema}\r\n//               onSubmit={handleSubmit}\r\n//             >\r\n//               {({ errors, touched }) => (\r\n//                 <Form>\r\n//                   <Field\r\n//                     name=\"email\"\r\n//                     as={TextField}\r\n//                     label=\"Email\"\r\n//                     fullWidth\r\n//                     margin=\"normal\"\r\n//                     variant=\"outlined\"\r\n//                     error={touched.email && !!errors.email}\r\n//                     helperText={touched.email && errors.email}\r\n//                   />\r\n\r\n//                   {loginWithOtp ? (\r\n//                     <Field\r\n//                       name=\"otp\"\r\n//                       as={TextField}\r\n//                       label=\"OTP\"\r\n//                       fullWidth\r\n//                       margin=\"normal\"\r\n//                       variant=\"outlined\"\r\n//                       error={touched.otp && !!errors.otp}\r\n//                       helperText={touched.otp && errors.otp}\r\n//                     />\r\n//                   ) : (\r\n//                     <Field\r\n//                       name=\"password\"\r\n//                       as={TextField}\r\n//                       label=\"Password\"\r\n//                       type={showPassword ? \"text\" : \"password\"}\r\n//                       fullWidth\r\n//                       margin=\"normal\"\r\n//                       variant=\"outlined\"\r\n//                       error={touched.password && !!errors.password}\r\n//                       helperText={touched.password && errors.password}\r\n//                       InputProps={{\r\n//                         endAdornment: (\r\n//                           <InputAdornment position=\"end\">\r\n//                             <IconButton\r\n//                               onClick={() => setShowPassword(!showPassword)}\r\n//                             >\r\n//                               {showPassword ? <VisibilityOff /> : <Visibility />}\r\n//                             </IconButton>\r\n//                           </InputAdornment>\r\n//                         ),\r\n//                       }}\r\n//                     />\r\n//                   )}\r\n\r\n//                   <Button\r\n//                     type=\"submit\"\r\n//                     variant=\"contained\"\r\n//                     fullWidth\r\n//                     sx={{ marginY: 2, paddingY: 1.5, backgroundColor: \"#367AFF\" }}\r\n//                   >\r\n//                     {loginWithOtp ? \"Login with OTP\" : \"Login\"}\r\n//                   </Button>\r\n\r\n//                   <Typography\r\n//                     variant=\"body2\"\r\n//                     align=\"center\"\r\n//                     sx={{ cursor: \"pointer\", color: \"#367AFF\" }}\r\n//                     onClick={() => setLoginWithOtp(!loginWithOtp)}\r\n//                   >\r\n//                     {loginWithOtp\r\n//                       ? \"Login with Password instead\"\r\n//                       : \"Login with OTP instead\"}\r\n//                   </Typography>\r\n//                 </Form>\r\n//               )}\r\n//             </Formik>\r\n//           </Box>\r\n//         </Grid>\r\n//       </Grid>\r\n//     </Container>\r\n//   );\r\n// };\r\n\r\n// export default Login;\r\n\r\n\r\n\r\nimport React, { useState } from \"react\";\r\nimport {\r\n  Container,\r\n  Grid,\r\n  Box,\r\n  TextField,\r\n  Button,\r\n  Typography,\r\n  InputAdornment,\r\n  IconButton,\r\n} from \"@mui/material\";\r\nimport { Visibility, VisibilityOff } from \"@mui/icons-material\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useFormik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport api from \"../../services/api\"; // Importing the API service\r\n\r\nconst Login: React.FC = () => {\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [useOtp, setUseOtp] = useState(false);\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  const validationSchema = Yup.object({\r\n    email: Yup.string().email(\"Invalid email\").required(\"Required\"),\r\n    password: Yup.string().when(\"useOtp\", {\r\n      is: false,\r\n      then: Yup.string().required(\"Required\"),\r\n    }),\r\n    otp: Yup.string().when(\"useOtp\", {\r\n      is: true,\r\n      then: Yup.string().required(\"Required\"),\r\n    }),\r\n  });\r\n\r\n  const handleVerifyOtp = async () => {\r\n    try {\r\n      const { email, otp } = formik.values;\r\n\r\n      // API call to verify OTP\r\n      const response = await api.post(\"/auth/verify-otp\", { email, otp });\r\n\r\n      alert(response.data.message); // \"User registered successfully\"\r\n      // Set login state and redirect\r\n      setIsLoggedIn(true);\r\n      navigate(\"/notes\"); // Navigate to the notes page\r\n    } catch (error: any) {\r\n      alert(error.response?.data?.message || \"Invalid OTP\");\r\n    }\r\n  };\r\n\r\n  const handleLogin = async () => {\r\n    try {\r\n      const { email, password } = formik.values;\r\n\r\n      // API call to login with email and password\r\n      const response = await api.post(\"/auth/login\", { email, password });\r\n\r\n      alert(response.data.message); // \"Login successful\"\r\n      // Set login state and redirect\r\n      setIsLoggedIn(true);\r\n      navigate(\"/notes\"); // Navigate to the notes page\r\n    } catch (error: any) {\r\n      alert(error.response?.data?.message || \"Invalid credentials\");\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    if (useOtp) {\r\n      await handleVerifyOtp();\r\n    } else {\r\n      await handleLogin();\r\n    }\r\n  };\r\n\r\n  const formik = useFormik({\r\n    initialValues: { email: \"\", password: \"\", otp: \"\" },\r\n    validationSchema,\r\n    onSubmit: handleSubmit,\r\n  });\r\n\r\n  const handleToggleLoginMethod = () => {\r\n    setUseOtp(!useOtp);\r\n  };\r\n\r\n  return (\r\n    <Container\r\n      maxWidth={false}\r\n      sx={{\r\n        height: \"100vh\",\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n      }}\r\n    >\r\n      <Grid\r\n        container\r\n        spacing={2}\r\n        sx={{\r\n          height: \"100%\",\r\n          padding: 0,\r\n          boxShadow: 3,\r\n          borderRadius: 3,\r\n          overflow: \"hidden\",\r\n        }}\r\n      >\r\n        <Grid item xs={12} md={6} sx={{ padding: 4 }}>\r\n          <Box\r\n            component=\"form\"\r\n            noValidate\r\n            autoComplete=\"off\"\r\n            onSubmit={formik.handleSubmit}\r\n            sx={{\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              justifyContent: \"center\",\r\n              alignItems: \"flex-start\",\r\n              gap: \"20px\",\r\n            }}\r\n          >\r\n            <TextField\r\n              label=\"Email\"\r\n              name=\"email\"\r\n              fullWidth\r\n              margin=\"normal\"\r\n              variant=\"outlined\"\r\n              value={formik.values.email}\r\n              onChange={formik.handleChange}\r\n              error={formik.touched.email && Boolean(formik.errors.email)}\r\n              helperText={formik.touched.email && formik.errors.email}\r\n            />\r\n            {!useOtp && (\r\n              <TextField\r\n                label=\"Password\"\r\n                name=\"password\"\r\n                type={showPassword ? \"text\" : \"password\"}\r\n                fullWidth\r\n                margin=\"normal\"\r\n                variant=\"outlined\"\r\n                value={formik.values.password}\r\n                onChange={formik.handleChange}\r\n                error={formik.touched.password && Boolean(formik.errors.password)}\r\n                helperText={formik.touched.password && formik.errors.password}\r\n                InputProps={{\r\n                  endAdornment: (\r\n                    <InputAdornment position=\"end\">\r\n                      <IconButton onClick={() => setShowPassword(!showPassword)}>\r\n                        {showPassword ? <VisibilityOff /> : <Visibility />}\r\n                      </IconButton>\r\n                    </InputAdornment>\r\n                  ),\r\n                }}\r\n              />\r\n            )}\r\n            {useOtp && (\r\n              <TextField\r\n                label=\"OTP\"\r\n                name=\"otp\"\r\n                fullWidth\r\n                margin=\"normal\"\r\n                variant=\"outlined\"\r\n                value={formik.values.otp}\r\n                onChange={formik.handleChange}\r\n                error={formik.touched.otp && Boolean(formik.errors.otp)}\r\n                helperText={formik.touched.otp && formik.errors.otp}\r\n              />\r\n            )}\r\n            <Button\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              fullWidth\r\n              sx={{ marginY: 2, paddingY: 1.5, backgroundColor: \"#367AFF\", borderRadius: \"10px\" }}\r\n            >\r\n              {useOtp ? \"Verify OTP\" : \"Login\"}\r\n            </Button>\r\n          </Box>\r\n          <Typography\r\n            align=\"center\"\r\n            variant=\"body2\"\r\n            sx={{ cursor: \"pointer\" }}\r\n            onClick={handleToggleLoginMethod}\r\n          >\r\n            {useOtp ? \"Login with Password\" : \"Login with OTP\"}\r\n          </Typography>\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}