{"ast":null,"code":"var _jsxFileName = \"D:\\\\Study\\\\Code\\\\Self-Projects\\\\NoteApp\\\\note-taking-frontend\\\\src\\\\components\\\\Auth\\\\Login.tsx\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import {\n//   Container,\n//   Grid,\n//   Typography,\n//   Box,\n//   TextField,\n//   Button,\n//   InputAdornment,\n//   IconButton,\n// } from \"@mui/material\";\n// import { Visibility, VisibilityOff } from \"@mui/icons-material\";\n// import { Formik, Form, Field } from \"formik\";\n// import * as Yup from \"yup\";\n// import api from \"../../services/api\";\n\n// const Login: React.FC = () => {\n//   const [showPassword, setShowPassword] = useState(false);\n//   const [loginWithOtp, setLoginWithOtp] = useState(false);\n\n//   const initialValues = loginWithOtp\n//     ? { email: \"\", otp: \"\" }\n//     : { email: \"\", password: \"\" };\n\n//   const validationSchema = Yup.object(\n//     loginWithOtp\n//       ? {\n//           email: Yup.string().email(\"Invalid email\").required(\"Required\"),\n//           otp: Yup.string().required(\"OTP is required\"),\n//         }\n//       : {\n//           email: Yup.string().email(\"Invalid email\").required(\"Required\"),\n//           password: Yup.string().required(\"Password is required\"),\n//         }\n//   );\n\n//   const handleSubmit = async (values: typeof initialValues) => {\n//     try {\n//       if (loginWithOtp) {\n//         const response = await api.post(\"/auth/verify-otp\", {\n//           email: values.email,\n//           otp: values.otp,\n//         });\n//         alert(response.data.message);\n//       } else {\n//         const response = await api.post(\"/auth/login\", {\n//           email: values.email,\n//           password: values.password,\n//         });\n//         localStorage.setItem(\"token\", response.data.token);\n//         window.location.href = \"/notes\";\n//       }\n//     } catch (error: any) {\n//       alert(error.response?.data?.message || \"Login failed\");\n//     }\n//   };\n\n//   return (\n//     <Container\n//       maxWidth={false}\n//       sx={{\n//         height: \"100vh\",\n//         display: \"flex\",\n//         alignItems: \"center\",\n//         justifyContent: \"center\",\n//       }}\n//     >\n//       <Grid\n//         container\n//         spacing={2}\n//         sx={{\n//           height: \"100%\",\n//           boxShadow: 3,\n//           borderRadius: 3,\n//           overflow: \"hidden\",\n//         }}\n//       >\n//         {/* Left Side - Image */}\n//         <Grid\n//           item\n//           xs={12}\n//           md={6}\n//           sx={{\n//             backgroundImage: \"url('/assets/images/signup-bg.png')\",\n//             backgroundSize: \"cover\",\n//             backgroundPosition: \"center\",\n//           }}\n//         ></Grid>\n\n//         {/* Right Side - Login Form */}\n//         <Grid item xs={12} md={6} sx={{ padding: 4 }}>\n//           <Box sx={{ padding: 8 }}>\n//             <Typography variant=\"h4\" fontWeight=\"bold\" gutterBottom>\n//               Login\n//             </Typography>\n//             <Typography variant=\"body1\" color=\"text.secondary\" mb={4}>\n//               Login to continue to HD\n//             </Typography>\n\n//             <Formik\n//               initialValues={initialValues}\n//               validationSchema={validationSchema}\n//               onSubmit={handleSubmit}\n//             >\n//               {({ errors, touched }) => (\n//                 <Form>\n//                   <Field\n//                     name=\"email\"\n//                     as={TextField}\n//                     label=\"Email\"\n//                     fullWidth\n//                     margin=\"normal\"\n//                     variant=\"outlined\"\n//                     error={touched.email && !!errors.email}\n//                     helperText={touched.email && errors.email}\n//                   />\n\n//                   {loginWithOtp ? (\n//                     <Field\n//                       name=\"otp\"\n//                       as={TextField}\n//                       label=\"OTP\"\n//                       fullWidth\n//                       margin=\"normal\"\n//                       variant=\"outlined\"\n//                       error={touched.otp && !!errors.otp}\n//                       helperText={touched.otp && errors.otp}\n//                     />\n//                   ) : (\n//                     <Field\n//                       name=\"password\"\n//                       as={TextField}\n//                       label=\"Password\"\n//                       type={showPassword ? \"text\" : \"password\"}\n//                       fullWidth\n//                       margin=\"normal\"\n//                       variant=\"outlined\"\n//                       error={touched.password && !!errors.password}\n//                       helperText={touched.password && errors.password}\n//                       InputProps={{\n//                         endAdornment: (\n//                           <InputAdornment position=\"end\">\n//                             <IconButton\n//                               onClick={() => setShowPassword(!showPassword)}\n//                             >\n//                               {showPassword ? <VisibilityOff /> : <Visibility />}\n//                             </IconButton>\n//                           </InputAdornment>\n//                         ),\n//                       }}\n//                     />\n//                   )}\n\n//                   <Button\n//                     type=\"submit\"\n//                     variant=\"contained\"\n//                     fullWidth\n//                     sx={{ marginY: 2, paddingY: 1.5, backgroundColor: \"#367AFF\" }}\n//                   >\n//                     {loginWithOtp ? \"Login with OTP\" : \"Login\"}\n//                   </Button>\n\n//                   <Typography\n//                     variant=\"body2\"\n//                     align=\"center\"\n//                     sx={{ cursor: \"pointer\", color: \"#367AFF\" }}\n//                     onClick={() => setLoginWithOtp(!loginWithOtp)}\n//                   >\n//                     {loginWithOtp\n//                       ? \"Login with Password instead\"\n//                       : \"Login with OTP instead\"}\n//                   </Typography>\n//                 </Form>\n//               )}\n//             </Formik>\n//           </Box>\n//         </Grid>\n//       </Grid>\n//     </Container>\n//   );\n// };\n\n// export default Login;\n\nimport React, { useState } from \"react\";\nimport { Container, Grid, Box, Typography, Button, TextField, InputAdornment, IconButton } from \"@mui/material\";\nimport { Visibility, VisibilityOff } from \"@mui/icons-material\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { useNavigate } from \"react-router-dom\";\nimport api from \"../../services/api\"; // Importing the API service\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = () => {\n  _s();\n  const [showPassword, setShowPassword] = useState(false);\n  const [useOtp, setUseOtp] = useState(false);\n  const [otpSent, setOtpSent] = useState(false);\n  const navigate = useNavigate();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const handleToggleLoginMethod = () => {\n    setUseOtp(!useOtp);\n  };\n  const validationSchema = Yup.object({\n    email: Yup.string().email(\"Invalid email\").required(\"Email is required\"),\n    ...(useOtp ? {\n      otp: Yup.string().required(\"OTP is required\")\n    } : {\n      password: Yup.string().required(\"Password is required\")\n    })\n  });\n  const formik = useFormik({\n    initialValues: {\n      email: \"\",\n      password: \"\",\n      otp: \"\"\n    },\n    validationSchema,\n    onSubmit: async values => {\n      try {\n        if (useOtp) {\n          // Login with OTP\n          await api.post(\"/auth/verify-otp\", {\n            email: values.email,\n            otp: values.otp\n          });\n        } else {\n          // Login with password\n          const response = await api.post(\"/auth/login\", {\n            email: values.email,\n            password: values.password\n          });\n          localStorage.setItem(\"token\", response.data.token);\n        }\n        setIsLoggedIn(true);\n        navigate(\"/notes\");\n      } catch (error) {\n        var _error$response, _error$response$data;\n        alert(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || \"Login failed\");\n      }\n    }\n  });\n  const handleClickShowPassword = () => {\n    setShowPassword(!showPassword);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: false,\n    sx: {\n      height: \"100vh\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\"\n    },\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      sx: {\n        height: \"100%\",\n        boxShadow: 3,\n        borderRadius: 3,\n        overflow: \"hidden\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        sx: {\n          padding: 4\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h4\",\n          fontWeight: \"bold\",\n          gutterBottom: true,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          component: \"form\",\n          onSubmit: formik.handleSubmit,\n          noValidate: true,\n          autoComplete: \"off\",\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            label: \"Email\",\n            name: \"email\",\n            fullWidth: true,\n            margin: \"normal\",\n            variant: \"outlined\",\n            value: formik.values.email,\n            onChange: formik.handleChange,\n            error: formik.touched.email && Boolean(formik.errors.email),\n            helperText: formik.touched.email && formik.errors.email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 13\n          }, this), useOtp ? /*#__PURE__*/_jsxDEV(TextField, {\n            label: \"OTP\",\n            name: \"otp\",\n            fullWidth: true,\n            margin: \"normal\",\n            variant: \"outlined\",\n            value: formik.values.otp,\n            onChange: formik.handleChange,\n            error: formik.touched.otp && Boolean(formik.errors.otp),\n            helperText: formik.touched.otp && formik.errors.otp\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(TextField, {\n            label: \"Password\",\n            name: \"password\",\n            fullWidth: true,\n            margin: \"normal\",\n            variant: \"outlined\",\n            type: showPassword ? \"text\" : \"password\",\n            value: formik.values.password,\n            onChange: formik.handleChange,\n            error: formik.touched.password && Boolean(formik.errors.password),\n            helperText: formik.touched.password && formik.errors.password,\n            InputProps: {\n              endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n                position: \"end\",\n                children: /*#__PURE__*/_jsxDEV(IconButton, {\n                  \"aria-label\": \"toggle password visibility\",\n                  onClick: handleClickShowPassword,\n                  edge: \"end\",\n                  children: showPassword ? /*#__PURE__*/_jsxDEV(VisibilityOff, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 312,\n                    columnNumber: 41\n                  }, this) : /*#__PURE__*/_jsxDEV(Visibility, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 312,\n                    columnNumber: 61\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 307,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 306,\n                columnNumber: 21\n              }, this)\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 15\n          }, this), otpSent || !useOtp ? /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            variant: \"contained\",\n            fullWidth: true,\n            sx: {\n              marginY: 2,\n              paddingY: 1.5,\n              backgroundColor: \"#367AFF\",\n              borderRadius: \"10px\"\n            },\n            children: useOtp ? \"Verify OTP\" : \"Login\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 15\n          }, this) : null]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          align: \"center\",\n          variant: \"body2\",\n          sx: {\n            cursor: \"pointer\"\n          },\n          onClick: handleToggleLoginMethod,\n          children: useOtp ? \"Login with Password\" : \"Login with OTP\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 245,\n    columnNumber: 5\n  }, this);\n};\n_s(Login, \"SNOJtCqPfIgqn02vG116MUp2mEM=\", false, function () {\n  return [useNavigate, useFormik];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","Container","Grid","Box","Typography","Button","TextField","InputAdornment","IconButton","Visibility","VisibilityOff","useFormik","Yup","useNavigate","api","jsxDEV","_jsxDEV","Login","_s","showPassword","setShowPassword","useOtp","setUseOtp","otpSent","setOtpSent","navigate","isLoggedIn","setIsLoggedIn","handleToggleLoginMethod","validationSchema","object","email","string","required","otp","password","formik","initialValues","onSubmit","values","post","response","localStorage","setItem","data","token","error","_error$response","_error$response$data","alert","message","handleClickShowPassword","maxWidth","sx","height","display","alignItems","justifyContent","children","container","spacing","boxShadow","borderRadius","overflow","item","xs","md","padding","variant","fontWeight","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","component","handleSubmit","noValidate","autoComplete","label","name","fullWidth","margin","value","onChange","handleChange","touched","Boolean","errors","helperText","type","InputProps","endAdornment","position","onClick","edge","marginY","paddingY","backgroundColor","align","cursor","_c","$RefreshReg$"],"sources":["D:/Study/Code/Self-Projects/NoteApp/note-taking-frontend/src/components/Auth/Login.tsx"],"sourcesContent":["// import React, { useState } from \"react\";\r\n// import {\r\n//   Container,\r\n//   Grid,\r\n//   Typography,\r\n//   Box,\r\n//   TextField,\r\n//   Button,\r\n//   InputAdornment,\r\n//   IconButton,\r\n// } from \"@mui/material\";\r\n// import { Visibility, VisibilityOff } from \"@mui/icons-material\";\r\n// import { Formik, Form, Field } from \"formik\";\r\n// import * as Yup from \"yup\";\r\n// import api from \"../../services/api\";\r\n\r\n// const Login: React.FC = () => {\r\n//   const [showPassword, setShowPassword] = useState(false);\r\n//   const [loginWithOtp, setLoginWithOtp] = useState(false);\r\n\r\n//   const initialValues = loginWithOtp\r\n//     ? { email: \"\", otp: \"\" }\r\n//     : { email: \"\", password: \"\" };\r\n\r\n//   const validationSchema = Yup.object(\r\n//     loginWithOtp\r\n//       ? {\r\n//           email: Yup.string().email(\"Invalid email\").required(\"Required\"),\r\n//           otp: Yup.string().required(\"OTP is required\"),\r\n//         }\r\n//       : {\r\n//           email: Yup.string().email(\"Invalid email\").required(\"Required\"),\r\n//           password: Yup.string().required(\"Password is required\"),\r\n//         }\r\n//   );\r\n\r\n//   const handleSubmit = async (values: typeof initialValues) => {\r\n//     try {\r\n//       if (loginWithOtp) {\r\n//         const response = await api.post(\"/auth/verify-otp\", {\r\n//           email: values.email,\r\n//           otp: values.otp,\r\n//         });\r\n//         alert(response.data.message);\r\n//       } else {\r\n//         const response = await api.post(\"/auth/login\", {\r\n//           email: values.email,\r\n//           password: values.password,\r\n//         });\r\n//         localStorage.setItem(\"token\", response.data.token);\r\n//         window.location.href = \"/notes\";\r\n//       }\r\n//     } catch (error: any) {\r\n//       alert(error.response?.data?.message || \"Login failed\");\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <Container\r\n//       maxWidth={false}\r\n//       sx={{\r\n//         height: \"100vh\",\r\n//         display: \"flex\",\r\n//         alignItems: \"center\",\r\n//         justifyContent: \"center\",\r\n//       }}\r\n//     >\r\n//       <Grid\r\n//         container\r\n//         spacing={2}\r\n//         sx={{\r\n//           height: \"100%\",\r\n//           boxShadow: 3,\r\n//           borderRadius: 3,\r\n//           overflow: \"hidden\",\r\n//         }}\r\n//       >\r\n//         {/* Left Side - Image */}\r\n//         <Grid\r\n//           item\r\n//           xs={12}\r\n//           md={6}\r\n//           sx={{\r\n//             backgroundImage: \"url('/assets/images/signup-bg.png')\",\r\n//             backgroundSize: \"cover\",\r\n//             backgroundPosition: \"center\",\r\n//           }}\r\n//         ></Grid>\r\n\r\n//         {/* Right Side - Login Form */}\r\n//         <Grid item xs={12} md={6} sx={{ padding: 4 }}>\r\n//           <Box sx={{ padding: 8 }}>\r\n//             <Typography variant=\"h4\" fontWeight=\"bold\" gutterBottom>\r\n//               Login\r\n//             </Typography>\r\n//             <Typography variant=\"body1\" color=\"text.secondary\" mb={4}>\r\n//               Login to continue to HD\r\n//             </Typography>\r\n\r\n//             <Formik\r\n//               initialValues={initialValues}\r\n//               validationSchema={validationSchema}\r\n//               onSubmit={handleSubmit}\r\n//             >\r\n//               {({ errors, touched }) => (\r\n//                 <Form>\r\n//                   <Field\r\n//                     name=\"email\"\r\n//                     as={TextField}\r\n//                     label=\"Email\"\r\n//                     fullWidth\r\n//                     margin=\"normal\"\r\n//                     variant=\"outlined\"\r\n//                     error={touched.email && !!errors.email}\r\n//                     helperText={touched.email && errors.email}\r\n//                   />\r\n\r\n//                   {loginWithOtp ? (\r\n//                     <Field\r\n//                       name=\"otp\"\r\n//                       as={TextField}\r\n//                       label=\"OTP\"\r\n//                       fullWidth\r\n//                       margin=\"normal\"\r\n//                       variant=\"outlined\"\r\n//                       error={touched.otp && !!errors.otp}\r\n//                       helperText={touched.otp && errors.otp}\r\n//                     />\r\n//                   ) : (\r\n//                     <Field\r\n//                       name=\"password\"\r\n//                       as={TextField}\r\n//                       label=\"Password\"\r\n//                       type={showPassword ? \"text\" : \"password\"}\r\n//                       fullWidth\r\n//                       margin=\"normal\"\r\n//                       variant=\"outlined\"\r\n//                       error={touched.password && !!errors.password}\r\n//                       helperText={touched.password && errors.password}\r\n//                       InputProps={{\r\n//                         endAdornment: (\r\n//                           <InputAdornment position=\"end\">\r\n//                             <IconButton\r\n//                               onClick={() => setShowPassword(!showPassword)}\r\n//                             >\r\n//                               {showPassword ? <VisibilityOff /> : <Visibility />}\r\n//                             </IconButton>\r\n//                           </InputAdornment>\r\n//                         ),\r\n//                       }}\r\n//                     />\r\n//                   )}\r\n\r\n//                   <Button\r\n//                     type=\"submit\"\r\n//                     variant=\"contained\"\r\n//                     fullWidth\r\n//                     sx={{ marginY: 2, paddingY: 1.5, backgroundColor: \"#367AFF\" }}\r\n//                   >\r\n//                     {loginWithOtp ? \"Login with OTP\" : \"Login\"}\r\n//                   </Button>\r\n\r\n//                   <Typography\r\n//                     variant=\"body2\"\r\n//                     align=\"center\"\r\n//                     sx={{ cursor: \"pointer\", color: \"#367AFF\" }}\r\n//                     onClick={() => setLoginWithOtp(!loginWithOtp)}\r\n//                   >\r\n//                     {loginWithOtp\r\n//                       ? \"Login with Password instead\"\r\n//                       : \"Login with OTP instead\"}\r\n//                   </Typography>\r\n//                 </Form>\r\n//               )}\r\n//             </Formik>\r\n//           </Box>\r\n//         </Grid>\r\n//       </Grid>\r\n//     </Container>\r\n//   );\r\n// };\r\n\r\n// export default Login;\r\n\r\n\r\n\r\nimport React, { useState } from \"react\";\r\nimport { Container, Grid, Box, Typography, Button, TextField, InputAdornment, IconButton } from \"@mui/material\";\r\nimport { Visibility, VisibilityOff } from \"@mui/icons-material\";\r\nimport { useFormik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport api from \"../../services/api\"; // Importing the API service\r\n\r\nconst Login: React.FC = () => {\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [useOtp, setUseOtp] = useState(false);\r\n  const [otpSent, setOtpSent] = useState(false);\r\n  const navigate = useNavigate();\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\r\n  const handleToggleLoginMethod = () => {\r\n    setUseOtp(!useOtp);\r\n  };\r\n\r\n  const validationSchema = Yup.object({\r\n    email: Yup.string().email(\"Invalid email\").required(\"Email is required\"),\r\n    ...(useOtp\r\n      ? { otp: Yup.string().required(\"OTP is required\") }\r\n      : { password: Yup.string().required(\"Password is required\") }),\r\n  });\r\n\r\n  const formik = useFormik({\r\n    initialValues: { email: \"\", password: \"\", otp: \"\" },\r\n    validationSchema,\r\n    onSubmit: async (values) => {\r\n      try {\r\n        if (useOtp) {\r\n          // Login with OTP\r\n          await api.post(\"/auth/verify-otp\", {\r\n            email: values.email,\r\n            otp: values.otp,\r\n          });\r\n        } else {\r\n          // Login with password\r\n          const response = await api.post(\"/auth/login\", {\r\n            email: values.email,\r\n            password: values.password,\r\n          });\r\n          localStorage.setItem(\"token\", response.data.token);\r\n        }\r\n        setIsLoggedIn(true);\r\n        navigate(\"/notes\");\r\n      } catch (error: any) {\r\n        alert(error.response?.data?.message || \"Login failed\");\r\n      }\r\n    },\r\n  });\r\n\r\n  const handleClickShowPassword = () => {\r\n    setShowPassword(!showPassword);\r\n  };\r\n\r\n  return (\r\n    <Container\r\n      maxWidth={false}\r\n      sx={{\r\n        height: \"100vh\",\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n      }}\r\n    >\r\n      <Grid\r\n        container\r\n        spacing={2}\r\n        sx={{\r\n          height: \"100%\",\r\n          boxShadow: 3,\r\n          borderRadius: 3,\r\n          overflow: \"hidden\",\r\n        }}\r\n      >\r\n        <Grid item xs={12} md={6} sx={{ padding: 4 }}>\r\n          <Typography variant=\"h4\" fontWeight=\"bold\" gutterBottom>\r\n            Login\r\n          </Typography>\r\n          <Box component=\"form\" onSubmit={formik.handleSubmit} noValidate autoComplete=\"off\">\r\n            <TextField\r\n              label=\"Email\"\r\n              name=\"email\"\r\n              fullWidth\r\n              margin=\"normal\"\r\n              variant=\"outlined\"\r\n              value={formik.values.email}\r\n              onChange={formik.handleChange}\r\n              error={formik.touched.email && Boolean(formik.errors.email)}\r\n              helperText={formik.touched.email && formik.errors.email}\r\n            />\r\n            {useOtp ? (\r\n              <TextField\r\n                label=\"OTP\"\r\n                name=\"otp\"\r\n                fullWidth\r\n                margin=\"normal\"\r\n                variant=\"outlined\"\r\n                value={formik.values.otp}\r\n                onChange={formik.handleChange}\r\n                error={formik.touched.otp && Boolean(formik.errors.otp)}\r\n                helperText={formik.touched.otp && formik.errors.otp}\r\n              />\r\n            ) : (\r\n              <TextField\r\n                label=\"Password\"\r\n                name=\"password\"\r\n                fullWidth\r\n                margin=\"normal\"\r\n                variant=\"outlined\"\r\n                type={showPassword ? \"text\" : \"password\"}\r\n                value={formik.values.password}\r\n                onChange={formik.handleChange}\r\n                error={formik.touched.password && Boolean(formik.errors.password)}\r\n                helperText={formik.touched.password && formik.errors.password}\r\n                InputProps={{\r\n                  endAdornment: (\r\n                    <InputAdornment position=\"end\">\r\n                      <IconButton\r\n                        aria-label=\"toggle password visibility\"\r\n                        onClick={handleClickShowPassword}\r\n                        edge=\"end\"\r\n                      >\r\n                        {showPassword ? <VisibilityOff /> : <Visibility />}\r\n                      </IconButton>\r\n                    </InputAdornment>\r\n                  ),\r\n                }}\r\n              />\r\n            )}\r\n            {otpSent || !useOtp ? (\r\n              <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                fullWidth\r\n                sx={{ marginY: 2, paddingY: 1.5, backgroundColor: \"#367AFF\", borderRadius: \"10px\" }}\r\n              >\r\n                {useOtp ? \"Verify OTP\" : \"Login\"}\r\n              </Button>\r\n            ) : null}\r\n          </Box>\r\n          <Typography\r\n            align=\"center\"\r\n            variant=\"body2\"\r\n            sx={{ cursor: \"pointer\" }}\r\n            onClick={handleToggleLoginMethod}\r\n          >\r\n            {useOtp ? \"Login with Password\" : \"Login with OTP\"}\r\n          </Typography>\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n\r\n\r\n"],"mappingsvC,SAASC,SAAS,EAAEC,IAAI,EAAEC,GAAG,EAAEC,UAAU,EAAEC,MAAM,EAAEC,SAAS,EAAEC,cAAc,EAAEC,UAAU,QAAQ,eAAe;AAC/G,SAASC,UAAU,EAAEC,aAAa,QAAQ,qBAAqB;AAC/D,SAASC,SAAS,QAAQ,QAAQ;AAClC,OAAO,KAAKC,GAAG,MAAM,KAAK;AAC1B,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,GAAG,MAAM,oBAAoB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,KAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGpB,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAACqB,MAAM,EAAEC,SAAS,CAAC,GAAGtB,QAAQ,CAAC,KAAK,CAAC;EAC3C,MAAM,CAACuB,OAAO,EAAEC,UAAU,CAAC,GAAGxB,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAMyB,QAAQ,GAAGZ,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACa,UAAU,EAAEC,aAAa,CAAC,GAAG3B,QAAQ,CAAC,KAAK,CAAC;EAEnD,MAAM4B,uBAAuB,GAAGA,CAAA,KAAM;IACpCN,SAAS,CAAC,CAACD,MAAM,CAAC;EACpB,CAAC;EAED,MAAMQ,gBAAgB,GAAGjB,GAAG,CAACkB,MAAM,CAAC;IAClCC,KAAK,EAAEnB,GAAG,CAACoB,MAAM,CAAC,CAAC,CAACD,KAAK,CAAC,eAAe,CAAC,CAACE,QAAQ,CAAC,mBAAmB,CAAC;IACxE,IAAIZ,MAAM,GACN;MAAEa,GAAG,EAAEtB,GAAG,CAACoB,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,iBAAiB;IAAE,CAAC,GACjD;MAAEE,QAAQ,EAAEvB,GAAG,CAACoB,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,sBAAsB;IAAE,CAAC;EACjE,CAAC,CAAC;EAEF,MAAMG,MAAM,GAAGzB,SAAS,CAAC;IACvB0B,aAAa,EAAE;MAAEN,KAAK,EAAE,EAAE;MAAEI,QAAQ,EAAE,EAAE;MAAED,GAAG,EAAE;IAAG,CAAC;IACnDL,gBAAgB;IAChBS,QAAQ,EAAE,MAAOC,MAAM,IAAK;MAC1B,IAAI;QACF,IAAIlB,MAAM,EAAE;UACV;UACA,MAAMP,GAAG,CAAC0B,IAAI,CAAC,kBAAkB,EAAE;YACjCT,KAAK,EAAEQ,MAAM,CAACR,KAAK;YACnBG,GAAG,EAAEK,MAAM,CAACL;UACd,CAAC,CAAC;QACJ,CAAC,MAAM;UACL;UACA,MAAMO,QAAQ,GAAG,MAAM3B,GAAG,CAAC0B,IAAI,CAAC,aAAa,EAAE;YAC7CT,KAAK,EAAEQ,MAAM,CAACR,KAAK;YACnBI,QAAQ,EAAEI,MAAM,CAACJ;UACnB,CAAC,CAAC;UACFO,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,QAAQ,CAACG,IAAI,CAACC,KAAK,CAAC;QACpD;QACAlB,aAAa,CAAC,IAAI,CAAC;QACnBF,QAAQ,CAAC,QAAQ,CAAC;MACpB,CAAC,CAAC,OAAOqB,KAAU,EAAE;QAAA,IAAAC,eAAA,EAAAC,oBAAA;QACnBC,KAAK,CAAC,EAAAF,eAAA,GAAAD,KAAK,CAACL,QAAQ,cAAAM,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBH,IAAI,cAAAI,oBAAA,uBAApBA,oBAAA,CAAsBE,OAAO,KAAI,cAAc,CAAC;MACxD;IACF;EACF,CAAC,CAAC;EAEF,MAAMC,uBAAuB,GAAGA,CAAA,KAAM;IACpC/B,eAAe,CAAC,CAACD,YAAY,CAAC;EAChC,CAAC;EAED,oBACEH,OAAA,CAACf,SAAS;IACRmD,QAAQ,EAAE,KAAM;IAChBC,EAAE,EAAE;MACFC,MAAM,EAAE,OAAO;MACfC,OAAO,EAAE,MAAM;MACfC,UAAU,EAAE,QAAQ;MACpBC,cAAc,EAAE;IAClB,CAAE;IAAAC,QAAA,eAEF1C,OAAA,CAACd,IAAI;MACHyD,SAAS;MACTC,OAAO,EAAE,CAAE;MACXP,EAAE,EAAE;QACFC,MAAM,EAAE,MAAM;QACdO,SAAS,EAAE,CAAC;QACZC,YAAY,EAAE,CAAC;QACfC,QAAQ,EAAE;MACZ,CAAE;MAAAL,QAAA,eAEF1C,OAAA,CAACd,IAAI;QAAC8D,IAAI;QAACC,EAAE,EAAE,EAAG;QAACC,EAAE,EAAE,CAAE;QAACb,EAAE,EAAE;UAAEc,OAAO,EAAE;QAAE,CAAE;QAAAT,QAAA,gBAC3C1C,OAAA,CAACZ,UAAU;UAACgE,OAAO,EAAC,IAAI;UAACC,UAAU,EAAC,MAAM;UAACC,YAAY;UAAAZ,QAAA,EAAC;QAExD;UAAAa,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAY,CAAC,eACb1D,OAAA,CAACb,GAAG;UAACwE,SAAS,EAAC,MAAM;UAACrC,QAAQ,EAAEF,MAAM,CAACwC,YAAa;UAACC,UAAU;UAACC,YAAY,EAAC,KAAK;UAAApB,QAAA,gBAChF1C,OAAA,CAACV,SAAS;YACRyE,KAAK,EAAC,OAAO;YACbC,IAAI,EAAC,OAAO;YACZC,SAAS;YACTC,MAAM,EAAC,QAAQ;YACfd,OAAO,EAAC,UAAU;YAClBe,KAAK,EAAE/C,MAAM,CAACG,MAAM,CAACR,KAAM;YAC3BqD,QAAQ,EAAEhD,MAAM,CAACiD,YAAa;YAC9BvC,KAAK,EAAEV,MAAM,CAACkD,OAAO,CAACvD,KAAK,IAAIwD,OAAO,CAACnD,MAAM,CAACoD,MAAM,CAACzD,KAAK,CAAE;YAC5D0D,UAAU,EAAErD,MAAM,CAACkD,OAAO,CAACvD,KAAK,IAAIK,MAAM,CAACoD,MAAM,CAACzD;UAAM;YAAAwC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACzD,CAAC,EACDrD,MAAM,gBACLL,OAAA,CAACV,SAAS;YACRyE,KAAK,EAAC,KAAK;YACXC,IAAI,EAAC,KAAK;YACVC,SAAS;YACTC,MAAM,EAAC,QAAQ;YACfd,OAAO,EAAC,UAAU;YAClBe,KAAK,EAAE/C,MAAM,CAACG,MAAM,CAACL,GAAI;YACzBkD,QAAQ,EAAEhD,MAAM,CAACiD,YAAa;YAC9BvC,KAAK,EAAEV,MAAM,CAACkD,OAAO,CAACpD,GAAG,IAAIqD,OAAO,CAACnD,MAAM,CAACoD,MAAM,CAACtD,GAAG,CAAE;YACxDuD,UAAU,EAAErD,MAAM,CAACkD,OAAO,CAACpD,GAAG,IAAIE,MAAM,CAACoD,MAAM,CAACtD;UAAI;YAAAqC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACrD,CAAC,gBAEF1D,OAAA,CAACV,SAAS;YACRyE,KAAK,EAAC,UAAU;YAChBC,IAAI,EAAC,UAAU;YACfC,SAAS;YACTC,MAAM,EAAC,QAAQ;YACfd,OAAO,EAAC,UAAU;YAClBsB,IAAI,EAAEvE,YAAY,GAAG,MAAM,GAAG,UAAW;YACzCgE,KAAK,EAAE/C,MAAM,CAACG,MAAM,CAACJ,QAAS;YAC9BiD,QAAQ,EAAEhD,MAAM,CAACiD,YAAa;YAC9BvC,KAAK,EAAEV,MAAM,CAACkD,OAAO,CAACnD,QAAQ,IAAIoD,OAAO,CAACnD,MAAM,CAACoD,MAAM,CAACrD,QAAQ,CAAE;YAClEsD,UAAU,EAAErD,MAAM,CAACkD,OAAO,CAACnD,QAAQ,IAAIC,MAAM,CAACoD,MAAM,CAACrD,QAAS;YAC9DwD,UAAU,EAAE;cACVC,YAAY,eACV5E,OAAA,CAACT,cAAc;gBAACsF,QAAQ,EAAC,KAAK;gBAAAnC,QAAA,eAC5B1C,OAAA,CAACR,UAAU;kBACT,cAAW,4BAA4B;kBACvCsF,OAAO,EAAE3C,uBAAwB;kBACjC4C,IAAI,EAAC,KAAK;kBAAArC,QAAA,EAETvC,YAAY,gBAAGH,OAAA,CAACN,aAAa;oBAAA6D,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAE,CAAC,gBAAG1D,OAAA,CAACP,UAAU;oBAAA8D,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAE;gBAAC;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACxC;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACC;YAEpB;UAAE;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CACF,EACAnD,OAAO,IAAI,CAACF,MAAM,gBACjBL,OAAA,CAACX,MAAM;YACLqF,IAAI,EAAC,QAAQ;YACbtB,OAAO,EAAC,WAAW;YACnBa,SAAS;YACT5B,EAAE,EAAE;cAAE2C,OAAO,EAAE,CAAC;cAAEC,QAAQ,EAAE,GAAG;cAAEC,eAAe,EAAE,SAAS;cAAEpC,YAAY,EAAE;YAAO,CAAE;YAAAJ,QAAA,EAEnFrC,MAAM,GAAG,YAAY,GAAG;UAAO;YAAAkD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC1B,CAAC,GACP,IAAI;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL,CAAC,eACN1D,OAAA,CAACZ,UAAU;UACT+F,KAAK,EAAC,QAAQ;UACd/B,OAAO,EAAC,OAAO;UACff,EAAE,EAAE;YAAE+C,MAAM,EAAE;UAAU,CAAE;UAC1BN,OAAO,EAAElE,uBAAwB;UAAA8B,QAAA,EAEhCrC,MAAM,GAAG,qBAAqB,GAAG;QAAgB;UAAAkD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACT;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEhB,CAAC;AAACxD,EAAA,CAnJID,KAAe;EAAA,QAIFJ,WAAW,EAcbF,SAAS;AAAA;AAAA0F,EAAA,GAlBpBpF,KAAe;AAqJrB,eAAeA,KAAK;AAAC,IAAAoF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}