{"ast":null,"code":"var _jsxFileName = \"D:\\\\Study\\\\Code\\\\Self-Projects\\\\NoteApp\\\\note-taking-frontend\\\\src\\\\components\\\\Notes\\\\NotesList.tsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// import { Button, Box, Typography, Grid } from \"@mui/material\";\n// import api from \"../../services/api\";\n// import NoteItem from \"./NoteItem\";\n\n// const NotesList: React.FC = () => {\n//   interface Note {\n//     _id: string;\n//     // add other properties of Note here\n//   }\n\n//   const [notes, setNotes] = useState<Note[]>([]);\n\n//   const fetchNotes = async () => {\n//     try {\n//       const response = await api.get(\"/notes\");\n//       setNotes(response.data);\n//     } catch (error) {\n//       console.error(\"Error fetching notes:\", error);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchNotes();\n//   }, []);\n\n//   const handleDelete = (id: string) => {\n//     setNotes(notes.filter(note => note._id !== id));\n//   };\n\n//   return (\n//     <Box p={2}>\n//       <Typography variant=\"h4\" gutterBottom>Your Notes</Typography>\n//       <Button variant=\"contained\" color=\"primary\" href=\"/create-note\">Create Note</Button>\n//       <Grid container spacing={2} mt={2}>\n//         {notes.map((note: any) => (\n//           <Grid item xs={12} sm={6} md={4} key={note._id}>\n//             <NoteItem note={note} onDelete={handleDelete} />\n//           </Grid>\n//         ))}\n//       </Grid>\n//     </Box>\n//   );\n// };\n\n// export default NotesList;\n\n// import React, { useEffect, useState } from \"react\";\n// import { Button, Box, Typography, Grid, Card, CardContent, IconButton } from \"@mui/material\";\n// import { Delete } from \"@mui/icons-material\";\n// import api from \"../../services/api\";\n\n// const Dashboard: React.FC = () => {\n//   interface Note {\n//     _id: string;\n//     title: string;\n//     content: string;\n//   }\n\n//   const [notes, setNotes] = useState<Note[]>([]);\n\n//   const fetchNotes = async () => {\n//     try {\n//       const response = await api.get(\"/notes\");\n//       setNotes(response.data);\n//     } catch (error) {\n//       console.error(\"Error fetching notes:\", error);\n//     }\n//   };\n\n//   const handleDelete = async (id: string) => {\n//     try {\n//       await api.delete(`/notes/${id}`);\n//       setNotes(notes.filter((note) => note._id !== id));\n//     } catch (error) {\n//       console.error(\"Error deleting note:\", error);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchNotes();\n//   }, []);\n\n//   const truncateContent = (content: string, maxLength: number = 15) =>\n//     content.length > maxLength ? `${content.slice(0, maxLength)}..` : content;\n\n//   return (\n//     <Box\n//       sx={{\n//         p: 2,\n//         display: \"flex\",\n//         flexDirection: \"column\",\n//         alignItems: \"center\",\n//         height: \"100vh\",\n//         backgroundColor: \"#f9f9f9\",\n//       }}\n//     >\n//       {/* Top Bar */}\n//       <Box\n//         sx={{\n//           width: \"100%\",\n//           display: \"flex\",\n//           justifyContent: \"space-between\",\n//           alignItems: \"center\",\n//           mb: 2,\n//         }}\n//       >\n//         <Typography variant=\"h6\" sx={{ fontWeight: \"bold\" }}>\n//           Dashboard\n//         </Typography>\n//         <Button variant=\"text\" color=\"primary\" href=\"/logout\">\n//           Sign Out\n//         </Button>\n//       </Box>\n\n//       {/* Welcome Card */}\n//       <Card\n//         sx={{\n//           width: \"100%\",\n//           maxWidth: 500,\n//           mb: 3,\n//           p: 2,\n//           textAlign: \"center\",\n//           boxShadow: 2,\n//           borderRadius: \"10px\",\n//         }}\n//       >\n//         <CardContent>\n//           <Typography variant=\"h6\" fontWeight=\"bold\">\n//             Welcome, Jonas Kahnwald!\n//           </Typography>\n//           <Typography variant=\"body2\" color=\"text.secondary\">\n//             Email: xxxxxx@xxxx.com\n//           </Typography>\n//         </CardContent>\n//       </Card>\n\n//       {/* Create Note Button */}\n//       <Button\n//         variant=\"contained\"\n//         href=\"/create-note\"\n//         sx={{\n//           width: \"100%\",\n//           maxWidth: 300,\n//           mb: 3,\n//           py: 1.5,\n//           fontWeight: \"bold\",\n//           backgroundColor: \"#367AFF\",\n//           borderRadius: \"10px\",\n//         }}\n//       >\n//         <Typography\n//           variant=\"button\"\n//           sx={{\n//             color: \"#FFF\",\n//             fontFamily: \"Inter\",\n//             fontSize: \"16px\",\n//             fontStyle: \"normal\",\n//             fontWeight: 600,\n//             lineHeight: \"120%\",\n//             letterSpacing: \"-0.16px\",\n//           }}\n//         >\n//           Create Note\n//         </Typography>\n//       </Button>\n\n//       {/* Notes List */}\n//       <Box\n//         sx={{\n//           width: \"100%\",\n//           maxWidth: 500,\n//           flexGrow: 1,\n//           overflowY: \"auto\",\n//         }}\n//       >\n//         <Typography variant=\"h6\" gutterBottom>\n//           Notes\n//         </Typography>\n//         <Grid container spacing={2}>\n//           {notes.map((note, index) => (\n//             <Grid item xs={12} key={note._id}>\n//               <Card\n//                 sx={{\n//                   display: \"flex\",\n//                   justifyContent: \"space-between\",\n//                   alignItems: \"center\",\n//                   boxShadow: 1,\n//                   borderRadius: \"8px\",\n//                   p: 1.5,\n//                   backgroundColor: \"#fff\",\n//                 }}\n//               >\n//                 <Box>\n//                   <Typography variant=\"subtitle1\" fontWeight=\"bold\">\n//                     Note {index + 1}: {note.title}\n//                   </Typography>\n//                   <Typography variant=\"body2\" color=\"text.secondary\">\n//                     {truncateContent(note.content)}\n//                   </Typography>\n//                 </Box>\n//                 <IconButton\n//                   aria-label=\"delete\"\n//                   onClick={() => handleDelete(note._id)}\n//                   sx={{\n//                     border: \"1px solid #ccc\",\n//                     borderRadius: \"50%\",\n//                     backgroundColor: \"#fff\",\n//                     color: \"#000\",\n//                     \"&:hover\": {\n//                       backgroundColor: \"#f5f5f5\",\n//                     },\n//                   }}\n//                 >\n//                   <Delete />\n//                 </IconButton>\n//               </Card>\n//             </Grid>\n//           ))}\n//         </Grid>\n//       </Box>\n//     </Box>\n//   );\n// };\n\n// export default Dashboard;\n\nimport React, { useEffect, useState } from \"react\";\nimport { Button, Box, Typography, Grid, Card, CardContent, IconButton, TextField } from \"@mui/material\";\nimport { Delete, Edit, Save } from \"@mui/icons-material\";\nimport api from \"../../services/api\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [notes, setNotes] = useState([]);\n  const fetchNotes = async () => {\n    try {\n      const response = await api.get(\"/notes\");\n      setNotes(response.data);\n    } catch (error) {\n      console.error(\"Error fetching notes:\", error);\n    }\n  };\n  const handleDelete = async id => {\n    try {\n      await api.delete(`/notes/${id}`);\n      setNotes(notes.filter(note => note._id !== id));\n    } catch (error) {\n      console.error(\"Error deleting note:\", error);\n    }\n  };\n  const handleEditToggle = id => {\n    setNotes(notes.map(note => note._id === id ? {\n      ...note,\n      isEditing: !note.isEditing\n    } : note));\n  };\n  const handleSave = async (id, updatedTitle, updatedContent) => {\n    try {\n      await api.put(`/notes/${id}`, {\n        title: updatedTitle,\n        content: updatedContent\n      });\n      setNotes(notes.map(note => note._id === id ? {\n        ...note,\n        title: updatedTitle,\n        content: updatedContent,\n        isEditing: false\n      } : note));\n    } catch (error) {\n      console.error(\"Error saving note:\", error);\n    }\n  };\n  useEffect(() => {\n    fetchNotes();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      width: \"100%\",\n      height: \"100vh\",\n      overflowY: \"auto\",\n      backgroundColor: \"rgba(255, 255, 255, 0.5)\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h5\",\n      align: \"center\",\n      gutterBottom: true,\n      children: \"Notes Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      sx: {\n        p: 2\n      },\n      children: notes.map(note => /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 4,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          sx: {\n            p: 2,\n            borderRadius: 2,\n            boxShadow: 3,\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"space-between\"\n          },\n          children: note.isEditing ?\n          /*#__PURE__*/\n          // Edit Mode\n          _jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(TextField, {\n              label: \"Title\",\n              fullWidth: true,\n              margin: \"dense\",\n              defaultValue: note.title,\n              onChange: e => setNotes(notes.map(n => n._id === note._id ? {\n                ...n,\n                title: e.target.value\n              } : n))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 336,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              label: \"Content\",\n              fullWidth: true,\n              margin: \"dense\",\n              multiline: true,\n              rows: 3,\n              defaultValue: note.content,\n              onChange: e => setNotes(notes.map(n => n._id === note._id ? {\n                ...n,\n                content: e.target.value\n              } : n))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 351,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: \"flex\",\n                justifyContent: \"space-between\",\n                mt: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                variant: \"outlined\",\n                color: \"success\",\n                startIcon: /*#__PURE__*/_jsxDEV(Save, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 372,\n                  columnNumber: 34\n                }, this),\n                onClick: () => handleSave(note._id, note.title, note.content),\n                children: \"Save\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 369,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"outlined\",\n                color: \"secondary\",\n                onClick: () => handleEditToggle(note._id),\n                children: \"Cancel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 379,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 368,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true) :\n          /*#__PURE__*/\n          // View Mode\n          _jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(CardContent, {\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h6\",\n                fontWeight: \"bold\",\n                children: note.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 392,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                color: \"text.secondary\",\n                children: note.content\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 395,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 391,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: \"flex\",\n                justifyContent: \"space-between\",\n                mt: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(IconButton, {\n                color: \"primary\",\n                onClick: () => handleEditToggle(note._id),\n                children: /*#__PURE__*/_jsxDEV(Edit, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 404,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 400,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n                color: \"error\",\n                onClick: () => handleDelete(note._id),\n                children: /*#__PURE__*/_jsxDEV(Delete, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 410,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 406,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 399,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 13\n        }, this)\n      }, note._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 308,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"vOaC7rmji7ux6HtcIeocV+tl1oY=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","Button","Box","Typography","Grid","Card","CardContent","IconButton","TextField","Delete","Edit","Save","api","jsxDEV","_jsxDEV","Fragment","_Fragment","Dashboard","_s","notes","setNotes","fetchNotes","response","get","data","error","console","handleDelete","id","delete","filter","note","_id","handleEditToggle","map","isEditing","handleSave","updatedTitle","updatedContent","put","title","content","sx","width","height","overflowY","backgroundColor","children","variant","align","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","container","spacing","p","item","xs","md","borderRadius","boxShadow","display","flexDirection","justifyContent","label","fullWidth","margin","defaultValue","onChange","e","n","target","value","multiline","rows","mt","color","startIcon","onClick","fontWeight","_c","$RefreshReg$"],"sources":["D:/Study/Code/Self-Projects/NoteApp/note-taking-frontend/src/components/Notes/NotesList.tsx"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\r\n// import { Button, Box, Typography, Grid } from \"@mui/material\";\r\n// import api from \"../../services/api\";\r\n// import NoteItem from \"./NoteItem\";\r\n\r\n// const NotesList: React.FC = () => {\r\n//   interface Note {\r\n//     _id: string;\r\n//     // add other properties of Note here\r\n//   }\r\n\r\n//   const [notes, setNotes] = useState<Note[]>([]);\r\n\r\n//   const fetchNotes = async () => {\r\n//     try {\r\n//       const response = await api.get(\"/notes\");\r\n//       setNotes(response.data);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching notes:\", error);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetchNotes();\r\n//   }, []);\r\n\r\n//   const handleDelete = (id: string) => {\r\n//     setNotes(notes.filter(note => note._id !== id));\r\n//   };\r\n\r\n//   return (\r\n//     <Box p={2}>\r\n//       <Typography variant=\"h4\" gutterBottom>Your Notes</Typography>\r\n//       <Button variant=\"contained\" color=\"primary\" href=\"/create-note\">Create Note</Button>\r\n//       <Grid container spacing={2} mt={2}>\r\n//         {notes.map((note: any) => (\r\n//           <Grid item xs={12} sm={6} md={4} key={note._id}>\r\n//             <NoteItem note={note} onDelete={handleDelete} />\r\n//           </Grid>\r\n//         ))}\r\n//       </Grid>\r\n//     </Box>\r\n//   );\r\n// };\r\n\r\n// export default NotesList;\r\n\r\n\r\n\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n// import { Button, Box, Typography, Grid, Card, CardContent, IconButton } from \"@mui/material\";\r\n// import { Delete } from \"@mui/icons-material\";\r\n// import api from \"../../services/api\";\r\n\r\n// const Dashboard: React.FC = () => {\r\n//   interface Note {\r\n//     _id: string;\r\n//     title: string;\r\n//     content: string;\r\n//   }\r\n\r\n//   const [notes, setNotes] = useState<Note[]>([]);\r\n\r\n//   const fetchNotes = async () => {\r\n//     try {\r\n//       const response = await api.get(\"/notes\");\r\n//       setNotes(response.data);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching notes:\", error);\r\n//     }\r\n//   };\r\n\r\n//   const handleDelete = async (id: string) => {\r\n//     try {\r\n//       await api.delete(`/notes/${id}`);\r\n//       setNotes(notes.filter((note) => note._id !== id));\r\n//     } catch (error) {\r\n//       console.error(\"Error deleting note:\", error);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetchNotes();\r\n//   }, []);\r\n\r\n//   const truncateContent = (content: string, maxLength: number = 15) =>\r\n//     content.length > maxLength ? `${content.slice(0, maxLength)}..` : content;\r\n\r\n//   return (\r\n//     <Box\r\n//       sx={{\r\n//         p: 2,\r\n//         display: \"flex\",\r\n//         flexDirection: \"column\",\r\n//         alignItems: \"center\",\r\n//         height: \"100vh\",\r\n//         backgroundColor: \"#f9f9f9\",\r\n//       }}\r\n//     >\r\n//       {/* Top Bar */}\r\n//       <Box\r\n//         sx={{\r\n//           width: \"100%\",\r\n//           display: \"flex\",\r\n//           justifyContent: \"space-between\",\r\n//           alignItems: \"center\",\r\n//           mb: 2,\r\n//         }}\r\n//       >\r\n//         <Typography variant=\"h6\" sx={{ fontWeight: \"bold\" }}>\r\n//           Dashboard\r\n//         </Typography>\r\n//         <Button variant=\"text\" color=\"primary\" href=\"/logout\">\r\n//           Sign Out\r\n//         </Button>\r\n//       </Box>\r\n\r\n//       {/* Welcome Card */}\r\n//       <Card\r\n//         sx={{\r\n//           width: \"100%\",\r\n//           maxWidth: 500,\r\n//           mb: 3,\r\n//           p: 2,\r\n//           textAlign: \"center\",\r\n//           boxShadow: 2,\r\n//           borderRadius: \"10px\",\r\n//         }}\r\n//       >\r\n//         <CardContent>\r\n//           <Typography variant=\"h6\" fontWeight=\"bold\">\r\n//             Welcome, Jonas Kahnwald!\r\n//           </Typography>\r\n//           <Typography variant=\"body2\" color=\"text.secondary\">\r\n//             Email: xxxxxx@xxxx.com\r\n//           </Typography>\r\n//         </CardContent>\r\n//       </Card>\r\n\r\n//       {/* Create Note Button */}\r\n//       <Button\r\n//         variant=\"contained\"\r\n//         href=\"/create-note\"\r\n//         sx={{\r\n//           width: \"100%\",\r\n//           maxWidth: 300,\r\n//           mb: 3,\r\n//           py: 1.5,\r\n//           fontWeight: \"bold\",\r\n//           backgroundColor: \"#367AFF\",\r\n//           borderRadius: \"10px\",\r\n//         }}\r\n//       >\r\n//         <Typography\r\n//           variant=\"button\"\r\n//           sx={{\r\n//             color: \"#FFF\",\r\n//             fontFamily: \"Inter\",\r\n//             fontSize: \"16px\",\r\n//             fontStyle: \"normal\",\r\n//             fontWeight: 600,\r\n//             lineHeight: \"120%\",\r\n//             letterSpacing: \"-0.16px\",\r\n//           }}\r\n//         >\r\n//           Create Note\r\n//         </Typography>\r\n//       </Button>\r\n\r\n//       {/* Notes List */}\r\n//       <Box\r\n//         sx={{\r\n//           width: \"100%\",\r\n//           maxWidth: 500,\r\n//           flexGrow: 1,\r\n//           overflowY: \"auto\",\r\n//         }}\r\n//       >\r\n//         <Typography variant=\"h6\" gutterBottom>\r\n//           Notes\r\n//         </Typography>\r\n//         <Grid container spacing={2}>\r\n//           {notes.map((note, index) => (\r\n//             <Grid item xs={12} key={note._id}>\r\n//               <Card\r\n//                 sx={{\r\n//                   display: \"flex\",\r\n//                   justifyContent: \"space-between\",\r\n//                   alignItems: \"center\",\r\n//                   boxShadow: 1,\r\n//                   borderRadius: \"8px\",\r\n//                   p: 1.5,\r\n//                   backgroundColor: \"#fff\",\r\n//                 }}\r\n//               >\r\n//                 <Box>\r\n//                   <Typography variant=\"subtitle1\" fontWeight=\"bold\">\r\n//                     Note {index + 1}: {note.title}\r\n//                   </Typography>\r\n//                   <Typography variant=\"body2\" color=\"text.secondary\">\r\n//                     {truncateContent(note.content)}\r\n//                   </Typography>\r\n//                 </Box>\r\n//                 <IconButton\r\n//                   aria-label=\"delete\"\r\n//                   onClick={() => handleDelete(note._id)}\r\n//                   sx={{\r\n//                     border: \"1px solid #ccc\",\r\n//                     borderRadius: \"50%\",\r\n//                     backgroundColor: \"#fff\",\r\n//                     color: \"#000\",\r\n//                     \"&:hover\": {\r\n//                       backgroundColor: \"#f5f5f5\",\r\n//                     },\r\n//                   }}\r\n//                 >\r\n//                   <Delete />\r\n//                 </IconButton>\r\n//               </Card>\r\n//             </Grid>\r\n//           ))}\r\n//         </Grid>\r\n//       </Box>\r\n//     </Box>\r\n//   );\r\n// };\r\n\r\n// export default Dashboard;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Box,\r\n  Typography,\r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n  IconButton,\r\n  TextField,\r\n} from \"@mui/material\";\r\nimport { Delete, Edit, Save } from \"@mui/icons-material\";\r\nimport api from \"../../services/api\";\r\n\r\nconst Dashboard: React.FC = () => {\r\n  interface Note {\r\n    _id: string;\r\n    title: string;\r\n    content: string;\r\n    isEditing?: boolean; // Added for toggling edit mode\r\n  }\r\n\r\n  const [notes, setNotes] = useState<Note[]>([]);\r\n\r\n  const fetchNotes = async () => {\r\n    try {\r\n      const response = await api.get(\"/notes\");\r\n      setNotes(response.data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching notes:\", error);\r\n    }\r\n  };\r\n\r\n  const handleDelete = async (id: string) => {\r\n    try {\r\n      await api.delete(`/notes/${id}`);\r\n      setNotes(notes.filter((note) => note._id !== id));\r\n    } catch (error) {\r\n      console.error(\"Error deleting note:\", error);\r\n    }\r\n  };\r\n\r\n  const handleEditToggle = (id: string) => {\r\n    setNotes(\r\n      notes.map((note) =>\r\n        note._id === id ? { ...note, isEditing: !note.isEditing } : note\r\n      )\r\n    );\r\n  };\r\n\r\n  const handleSave = async (id: string, updatedTitle: string, updatedContent: string) => {\r\n    try {\r\n      await api.put(`/notes/${id}`, { title: updatedTitle, content: updatedContent });\r\n      setNotes(\r\n        notes.map((note) =>\r\n          note._id === id\r\n            ? { ...note, title: updatedTitle, content: updatedContent, isEditing: false }\r\n            : note\r\n        )\r\n      );\r\n    } catch (error) {\r\n      console.error(\"Error saving note:\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchNotes();\r\n  }, []);\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        width: \"100%\",\r\n        height: \"100vh\",\r\n        overflowY: \"auto\",\r\n        backgroundColor: \"rgba(255, 255, 255, 0.5)\",\r\n      }}\r\n    >\r\n      <Typography variant=\"h5\" align=\"center\" gutterBottom>\r\n        Notes Dashboard\r\n      </Typography>\r\n\r\n      <Grid container spacing={2} sx={{ p: 2 }}>\r\n        {notes.map((note) => (\r\n          <Grid item xs={12} md={4} key={note._id}>\r\n            <Card\r\n              sx={{\r\n                p: 2,\r\n                borderRadius: 2,\r\n                boxShadow: 3,\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n                justifyContent: \"space-between\",\r\n              }}\r\n            >\r\n              {note.isEditing ? (\r\n                // Edit Mode\r\n                <>\r\n                  <TextField\r\n                    label=\"Title\"\r\n                    fullWidth\r\n                    margin=\"dense\"\r\n                    defaultValue={note.title}\r\n                    onChange={(e) =>\r\n                      setNotes(\r\n                        notes.map((n) =>\r\n                          n._id === note._id\r\n                            ? { ...n, title: e.target.value }\r\n                            : n\r\n                        )\r\n                      )\r\n                    }\r\n                  />\r\n                  <TextField\r\n                    label=\"Content\"\r\n                    fullWidth\r\n                    margin=\"dense\"\r\n                    multiline\r\n                    rows={3}\r\n                    defaultValue={note.content}\r\n                    onChange={(e) =>\r\n                      setNotes(\r\n                        notes.map((n) =>\r\n                          n._id === note._id\r\n                            ? { ...n, content: e.target.value }\r\n                            : n\r\n                        )\r\n                      )\r\n                    }\r\n                  />\r\n                  <Box sx={{ display: \"flex\", justifyContent: \"space-between\", mt: 2 }}>\r\n                    <Button\r\n                      variant=\"outlined\"\r\n                      color=\"success\"\r\n                      startIcon={<Save />}\r\n                      onClick={() =>\r\n                        handleSave(note._id, note.title, note.content)\r\n                      }\r\n                    >\r\n                      Save\r\n                    </Button>\r\n                    <Button\r\n                      variant=\"outlined\"\r\n                      color=\"secondary\"\r\n                      onClick={() => handleEditToggle(note._id)}\r\n                    >\r\n                      Cancel\r\n                    </Button>\r\n                  </Box>\r\n                </>\r\n              ) : (\r\n                // View Mode\r\n                <>\r\n                  <CardContent>\r\n                    <Typography variant=\"h6\" fontWeight=\"bold\">\r\n                      {note.title}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                      {note.content}\r\n                    </Typography>\r\n                  </CardContent>\r\n                  <Box sx={{ display: \"flex\", justifyContent: \"space-between\", mt: 2 }}>\r\n                    <IconButton\r\n                      color=\"primary\"\r\n                      onClick={() => handleEditToggle(note._id)}\r\n                    >\r\n                      <Edit />\r\n                    </IconButton>\r\n                    <IconButton\r\n                      color=\"error\"\r\n                      onClick={() => handleDelete(note._id)}\r\n                    >\r\n                      <Delete />\r\n                    </IconButton>\r\n                  </Box>\r\n                </>\r\n              )}\r\n            </Card>\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n\r\n\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAKA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AASA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SACEC,MAAM,EACNC,GAAG,EACHC,UAAU,EACVC,IAAI,EACJC,IAAI,EACJC,WAAW,EACXC,UAAU,EACVC,SAAS,Q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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}