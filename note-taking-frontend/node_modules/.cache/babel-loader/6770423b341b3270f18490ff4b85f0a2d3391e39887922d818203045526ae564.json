{"ast":null,"code":"var _jsxFileName = \"D:\\\\Study\\\\Code\\\\Self-Projects\\\\NoteApp\\\\note-taking-frontend\\\\src\\\\components\\\\Auth\\\\Login.tsx\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import {\n//   Container,\n//   Grid,\n//   Typography,\n//   Box,\n//   TextField,\n//   Button,\n//   InputAdornment,\n//   IconButton,\n// } from \"@mui/material\";\n// import { Visibility, VisibilityOff } from \"@mui/icons-material\";\n// import { Formik, Form, Field } from \"formik\";\n// import * as Yup from \"yup\";\n// import api from \"../../services/api\";\n\n// const Login: React.FC = () => {\n//   const [showPassword, setShowPassword] = useState(false);\n//   const [loginWithOtp, setLoginWithOtp] = useState(false);\n\n//   const initialValues = loginWithOtp\n//     ? { email: \"\", otp: \"\" }\n//     : { email: \"\", password: \"\" };\n\n//   const validationSchema = Yup.object(\n//     loginWithOtp\n//       ? {\n//           email: Yup.string().email(\"Invalid email\").required(\"Required\"),\n//           otp: Yup.string().required(\"OTP is required\"),\n//         }\n//       : {\n//           email: Yup.string().email(\"Invalid email\").required(\"Required\"),\n//           password: Yup.string().required(\"Password is required\"),\n//         }\n//   );\n\n//   const handleSubmit = async (values: typeof initialValues) => {\n//     try {\n//       if (loginWithOtp) {\n//         const response = await api.post(\"/auth/verify-otp\", {\n//           email: values.email,\n//           otp: values.otp,\n//         });\n//         alert(response.data.message);\n//       } else {\n//         const response = await api.post(\"/auth/login\", {\n//           email: values.email,\n//           password: values.password,\n//         });\n//         localStorage.setItem(\"token\", response.data.token);\n//         window.location.href = \"/notes\";\n//       }\n//     } catch (error: any) {\n//       alert(error.response?.data?.message || \"Login failed\");\n//     }\n//   };\n\n//   return (\n//     <Container\n//       maxWidth={false}\n//       sx={{\n//         height: \"100vh\",\n//         display: \"flex\",\n//         alignItems: \"center\",\n//         justifyContent: \"center\",\n//       }}\n//     >\n//       <Grid\n//         container\n//         spacing={2}\n//         sx={{\n//           height: \"100%\",\n//           boxShadow: 3,\n//           borderRadius: 3,\n//           overflow: \"hidden\",\n//         }}\n//       >\n//         {/* Left Side - Image */}\n//         <Grid\n//           item\n//           xs={12}\n//           md={6}\n//           sx={{\n//             backgroundImage: \"url('/assets/images/signup-bg.png')\",\n//             backgroundSize: \"cover\",\n//             backgroundPosition: \"center\",\n//           }}\n//         ></Grid>\n\n//         {/* Right Side - Login Form */}\n//         <Grid item xs={12} md={6} sx={{ padding: 4 }}>\n//           <Box sx={{ padding: 8 }}>\n//             <Typography variant=\"h4\" fontWeight=\"bold\" gutterBottom>\n//               Login\n//             </Typography>\n//             <Typography variant=\"body1\" color=\"text.secondary\" mb={4}>\n//               Login to continue to HD\n//             </Typography>\n\n//             <Formik\n//               initialValues={initialValues}\n//               validationSchema={validationSchema}\n//               onSubmit={handleSubmit}\n//             >\n//               {({ errors, touched }) => (\n//                 <Form>\n//                   <Field\n//                     name=\"email\"\n//                     as={TextField}\n//                     label=\"Email\"\n//                     fullWidth\n//                     margin=\"normal\"\n//                     variant=\"outlined\"\n//                     error={touched.email && !!errors.email}\n//                     helperText={touched.email && errors.email}\n//                   />\n\n//                   {loginWithOtp ? (\n//                     <Field\n//                       name=\"otp\"\n//                       as={TextField}\n//                       label=\"OTP\"\n//                       fullWidth\n//                       margin=\"normal\"\n//                       variant=\"outlined\"\n//                       error={touched.otp && !!errors.otp}\n//                       helperText={touched.otp && errors.otp}\n//                     />\n//                   ) : (\n//                     <Field\n//                       name=\"password\"\n//                       as={TextField}\n//                       label=\"Password\"\n//                       type={showPassword ? \"text\" : \"password\"}\n//                       fullWidth\n//                       margin=\"normal\"\n//                       variant=\"outlined\"\n//                       error={touched.password && !!errors.password}\n//                       helperText={touched.password && errors.password}\n//                       InputProps={{\n//                         endAdornment: (\n//                           <InputAdornment position=\"end\">\n//                             <IconButton\n//                               onClick={() => setShowPassword(!showPassword)}\n//                             >\n//                               {showPassword ? <VisibilityOff /> : <Visibility />}\n//                             </IconButton>\n//                           </InputAdornment>\n//                         ),\n//                       }}\n//                     />\n//                   )}\n\n//                   <Button\n//                     type=\"submit\"\n//                     variant=\"contained\"\n//                     fullWidth\n//                     sx={{ marginY: 2, paddingY: 1.5, backgroundColor: \"#367AFF\" }}\n//                   >\n//                     {loginWithOtp ? \"Login with OTP\" : \"Login\"}\n//                   </Button>\n\n//                   <Typography\n//                     variant=\"body2\"\n//                     align=\"center\"\n//                     sx={{ cursor: \"pointer\", color: \"#367AFF\" }}\n//                     onClick={() => setLoginWithOtp(!loginWithOtp)}\n//                   >\n//                     {loginWithOtp\n//                       ? \"Login with Password instead\"\n//                       : \"Login with OTP instead\"}\n//                   </Typography>\n//                 </Form>\n//               )}\n//             </Formik>\n//           </Box>\n//         </Grid>\n//       </Grid>\n//     </Container>\n//   );\n// };\n\n// export default Login;\n\n// import React, { useState } from \"react\";\n// import {\n//   Container,\n//   Grid,\n//   Typography,\n//   Box,\n//   TextField,\n//   InputAdornment,\n//   IconButton,\n//   Button,\n// } from \"@mui/material\";\n// import { Visibility, VisibilityOff } from \"@mui/icons-material\";\n// import { useFormik } from \"formik\";\n// import * as Yup from \"yup\";\n// import api from \"../../services/api\";\n\n// const Login: React.FC = () => {\n//   const [useOtp, setUseOtp] = useState(false); // Toggle between OTP and password login\n//   const [otpSent, setOtpSent] = useState(false); // Track OTP sent status\n//   const [showPassword, setShowPassword] = useState(false);\n\n//   const handleToggleLoginMethod = () => {\n//     setUseOtp(!useOtp);\n//     setOtpSent(false); // Reset OTP sent status when switching methods\n//   };\n\n//   const handleSendOtp = async (email: string) => {\n//     try {\n//       await api.post(\"/auth/send-otp\", { email });\n//       alert(\"OTP sent successfully to your email\");\n//       setOtpSent(true);\n//     } catch (error: any) {\n//       alert(error.response?.data?.message || \"Failed to send OTP\");\n//     }\n//   };\n\n//   const validationSchema = Yup.object({\n//     email: Yup.string().email(\"Invalid email\").required(\"Email is required\"),\n//     ...(useOtp\n//       ? { otp: Yup.string().required(\"OTP is required\") }\n//       : { password: Yup.string().required(\"Password is required\") }),\n//   });\n\n//   const formik = useFormik({\n//     initialValues: { email: \"\", password: \"\", otp: \"\" },\n//     validationSchema,\n//     onSubmit: async (values) => {\n//       try {\n//         if (useOtp) {\n//           // Login with OTP\n//           await api.post(\"/auth/verify-otp\", { email: values.email, otp: values.otp });\n//         } else {\n//           // Login with password\n//           const response = await api.post(\"/auth/login\", {\n//             email: values.email,\n//             password: values.password,\n//           });\n//           localStorage.setItem(\"token\", response.data.token);\n//         }\n//         window.location.href = \"/notes\";\n//       } catch (error: any) {\n//         alert(error.response?.data?.message || \"Login failed\");\n//       }\n//     },\n//   });\n\n//   return (\n//     <Container\n//       maxWidth={false}\n//       sx={{\n//         height: \"100vh\",\n//         display: \"flex\",\n//         alignItems: \"center\",\n//         justifyContent: \"center\",\n//       }}\n//     >\n//       <Grid\n//         container\n//         spacing={2}\n//         sx={{\n//           height: \"100%\",\n//           boxShadow: 3,\n//           borderRadius: 3,\n//           overflow: \"hidden\",\n//         }}\n//       >\n//         {/* Left Side - Image */}\n//         <Grid\n//           item\n//           xs={12}\n//           md={6}\n//           sx={{\n//             backgroundImage: \"url('/assets/images/signup-bg.png')\",\n//             backgroundSize: \"cover\",\n//             backgroundPosition: \"center\",\n//           }}\n//         ></Grid>\n\n//         {/* Right Side - Login Form */}\n//         <Grid item xs={12} md={6} sx={{ padding: 4 }}>\n//           <Typography variant=\"h4\" fontWeight=\"bold\" gutterBottom>\n//             Login\n//           </Typography>\n//           <Typography variant=\"body1\" color=\"text.secondary\" mb={4}>\n//             Login to access your account\n//           </Typography>\n//           <Box component=\"form\" noValidate onSubmit={formik.handleSubmit}>\n//             <TextField\n//               label=\"Email\"\n//               name=\"email\"\n//               fullWidth\n//               margin=\"normal\"\n//               variant=\"outlined\"\n//               value={formik.values.email}\n//               onChange={formik.handleChange}\n//               error={formik.touched.email && !!formik.errors.email}\n//               helperText={formik.touched.email && formik.errors.email}\n//             />\n//             {useOtp ? (\n//               <>\n//                 {otpSent ? (\n//                   <TextField\n//                     label=\"OTP\"\n//                     name=\"otp\"\n//                     fullWidth\n//                     margin=\"normal\"\n//                     variant=\"outlined\"\n//                     value={formik.values.otp}\n//                     onChange={formik.handleChange}\n//                     error={formik.touched.otp && !!formik.errors.otp}\n//                     helperText={formik.touched.otp && formik.errors.otp}\n//                   />\n//                 ) : (\n//                   <Button\n//                     variant=\"contained\"\n//                     fullWidth\n//                     sx={{ marginY: 2, paddingY: 1.5 }}\n//                     onClick={() => handleSendOtp(formik.values.email)}\n//                     disabled={!formik.values.email || !!formik.errors.email}\n//                   >\n//                     Send OTP\n//                   </Button>\n//                 )}\n//               </>\n//             ) : (\n//               <TextField\n//                 label=\"Password\"\n//                 name=\"password\"\n//                 fullWidth\n//                 margin=\"normal\"\n//                 variant=\"outlined\"\n//                 type={showPassword ? \"text\" : \"password\"}\n//                 value={formik.values.password}\n//                 onChange={formik.handleChange}\n//                 error={formik.touched.password && !!formik.errors.password}\n//                 helperText={formik.touched.password && formik.errors.password}\n//                 InputProps={{\n//                   endAdornment: (\n//                     <InputAdornment position=\"end\">\n//                       <IconButton onClick={() => setShowPassword(!showPassword)}>\n//                         {showPassword ? <VisibilityOff /> : <Visibility />}\n//                       </IconButton>\n//                     </InputAdornment>\n//                   ),\n//                 }}\n//               />\n//             )}\n//             <Button\n//               type=\"submit\"\n//               variant=\"contained\"\n//               fullWidth\n//               sx={{ marginY: 2, paddingY: 1.5 }}\n//             >\n//               {useOtp ? (otpSent ? \"Verify OTP\" : \"Send OTP\") : \"Login\"}\n//             </Button>\n//           </Box>\n//           <Typography\n//             align=\"center\"\n//             variant=\"body2\"\n//             sx={{ cursor: \"pointer\" }}\n//             onClick={handleToggleLoginMethod}\n//           >\n//             {useOtp ? \"Login with Password\" : \"Login with OTP\"}\n//           </Typography>\n//         </Grid>\n//       </Grid>\n//     </Container>\n//   );\n// };\n\n// export default Login;\n\nimport React, { useState } from \"react\";\nimport { Container, Grid, Typography, Box, TextField, Button, InputAdornment, IconButton } from \"@mui/material\";\nimport { Visibility, VisibilityOff } from \"@mui/icons-material\";\nimport { Formik, Form, Field } from \"formik\";\nimport * as Yup from \"yup\";\nimport api from \"../../services/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = () => {\n  _s();\n  const [useOtp, setUseOtp] = useState(false);\n  const [otpSent, setOtpSent] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  const initialValues = {\n    email: \"\",\n    password: \"\",\n    otp: \"\"\n  };\n  const validationSchema = Yup.object({\n    email: Yup.string().email(\"Invalid email\").required(\"Required\"),\n    password: Yup.string().when(\"otp\", {\n      is: otp => !otp,\n      then: Yup.string().required(\"Password is required\")\n    }),\n    otp: Yup.string().when(\"password\", {\n      is: password => !password,\n      then: Yup.string().required(\"OTP is required\")\n    })\n  });\n  const handleSendOtp = async email => {\n    try {\n      await api.post(\"/auth/send-otp\", {\n        email\n      });\n      alert(\"OTP sent successfully\");\n      setOtpSent(true);\n    } catch (error) {\n      var _error$response, _error$response$data;\n      alert(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || \"Failed to send OTP\");\n    }\n  };\n  const handleSubmit = async values => {\n    try {\n      if (useOtp) {\n        // OTP-based login\n        const response = await api.post(\"/auth/verify-otp\", {\n          email: values.email,\n          otp: values.otp\n        });\n        localStorage.setItem(\"token\", response.data.token);\n      } else {\n        // Password-based login\n        const response = await api.post(\"/auth/login\", {\n          email: values.email,\n          password: values.password\n        });\n        localStorage.setItem(\"token\", response.data.token);\n      }\n      window.location.href = \"/notes\";\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      alert(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || \"Login failed\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: false,\n    sx: {\n      height: \"100vh\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\"\n    },\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      sx: {\n        height: \"100%\",\n        boxShadow: 3,\n        borderRadius: 3,\n        overflow: \"hidden\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        sx: {\n          backgroundImage: \"url('/assets/images/signup-bg.png')\",\n          backgroundSize: \"cover\",\n          backgroundPosition: \"center\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        sx: {\n          padding: 4\n        },\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          component: \"div\",\n          noValidate: true,\n          autoComplete: \"off\",\n          sx: {\n            padding: 9\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h4\",\n            fontWeight: \"bold\",\n            gutterBottom: true,\n            children: \"Login\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 482,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body1\",\n            color: \"text.secondary\",\n            mb: 4,\n            children: \"Login with your email and password or OTP\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 485,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Formik, {\n            initialValues: initialValues,\n            validationSchema: validationSchema,\n            onSubmit: handleSubmit,\n            children: ({\n              errors,\n              touched,\n              values\n            }) => /*#__PURE__*/_jsxDEV(Form, {\n              children: [/*#__PURE__*/_jsxDEV(Field, {\n                name: \"email\",\n                as: TextField,\n                label: \"Email\",\n                fullWidth: true,\n                margin: \"normal\",\n                error: touched.email && !!errors.email,\n                helperText: touched.email && errors.email\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 495,\n                columnNumber: 19\n              }, this), useOtp ? /*#__PURE__*/_jsxDEV(TextField, {\n                label: \"OTP\",\n                name: \"otp\",\n                fullWidth: true,\n                margin: \"normal\",\n                value: values.otp,\n                onChange: e => values.otp = e.target.value,\n                error: touched.otp && !!errors.otp,\n                helperText: touched.otp && errors.otp\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 506,\n                columnNumber: 21\n              }, this) : /*#__PURE__*/_jsxDEV(TextField, {\n                label: \"Password\",\n                name: \"password\",\n                type: showPassword ? \"text\" : \"password\",\n                fullWidth: true,\n                margin: \"normal\",\n                value: values.password,\n                onChange: e => values.password = e.target.value,\n                error: touched.password && !!errors.password,\n                helperText: touched.password && errors.password,\n                InputProps: {\n                  endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n                    position: \"end\",\n                    children: /*#__PURE__*/_jsxDEV(IconButton, {\n                      onClick: () => setShowPassword(!showPassword),\n                      children: showPassword ? /*#__PURE__*/_jsxDEV(VisibilityOff, {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 533,\n                        columnNumber: 47\n                      }, this) : /*#__PURE__*/_jsxDEV(Visibility, {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 533,\n                        columnNumber: 67\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 530,\n                      columnNumber: 29\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 529,\n                    columnNumber: 27\n                  }, this)\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 517,\n                columnNumber: 21\n              }, this), useOtp && !otpSent && /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"outlined\",\n                fullWidth: true,\n                sx: {\n                  marginY: 1.5\n                },\n                onClick: () => handleSendOtp(values.email),\n                children: \"Send OTP\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 542,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                type: \"submit\",\n                variant: \"contained\",\n                fullWidth: true,\n                sx: {\n                  marginY: 2,\n                  paddingY: 1.5,\n                  backgroundColor: \"#367AFF\"\n                },\n                children: useOtp ? \"Login with OTP\" : \"Login\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 552,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 494,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 488,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            align: \"center\",\n            sx: {\n              cursor: \"pointer\",\n              marginTop: 2\n            },\n            onClick: () => setUseOtp(!useOtp),\n            children: useOtp ? \"Login with Password\" : \"Login with OTP\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 563,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 481,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 457,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 448,\n    columnNumber: 5\n  }, this);\n};\n_s(Login, \"Z6ZGtdOIuRNj/4vEN4gj4n5hEEU=\");\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","Container","Grid","Typography","Box","TextField","Button","InputAdornment","IconButton","Visibility","VisibilityOff","Formik","Form","Field","Yup","api","jsxDEV","_jsxDEV","Login","_s","useOtp","setUseOtp","otpSent","setOtpSent","showPassword","setShowPassword","initialValues","email","password","otp","validationSchema","object","string","required","when","is","then","handleSendOtp","post","alert","error","_error$response","_error$response$data","response","data","message","handleSubmit","values","localStorage","setItem","token","window","location","href","_error$response2","_error$response2$data","maxWidth","sx","height","display","alignItems","justifyContent","children","container","spacing","boxShadow","borderRadius","overflow","item","xs","md","backgroundImage","backgroundSize","backgroundPosition","fileName","_jsxFileName","lineNumber","columnNumber","padding","component","noValidate","autoComplete","variant","fontWeight","gutterBottom","color","mb","onSubmit","errors","touched","name","as","label","fullWidth","margin","helperText","value","onChange","e","target","type","InputProps","endAdornment","position","onClick","marginY","paddingY","backgroundColor","align","cursor","marginTop","_c","$RefreshReg$"],"sources":["D:/Study/Code/Self-Projects/NoteApp/note-taking-frontend/src/components/Auth/Login.tsx"],"sourcesContent":["// import React, { useState } from \"react\";\r\n// import {\r\n//   Container,\r\n//   Grid,\r\n//   Typography,\r\n//   Box,\r\n//   TextField,\r\n//   Button,\r\n//   InputAdornment,\r\n//   IconButton,\r\n// } from \"@mui/material\";\r\n// import { Visibility, VisibilityOff } from \"@mui/icons-material\";\r\n// import { Formik, Form, Field } from \"formik\";\r\n// import * as Yup from \"yup\";\r\n// import api from \"../../services/api\";\r\n\r\n// const Login: React.FC = () => {\r\n//   const [showPassword, setShowPassword] = useState(false);\r\n//   const [loginWithOtp, setLoginWithOtp] = useState(false);\r\n\r\n//   const initialValues = loginWithOtp\r\n//     ? { email: \"\", otp: \"\" }\r\n//     : { email: \"\", password: \"\" };\r\n\r\n//   const validationSchema = Yup.object(\r\n//     loginWithOtp\r\n//       ? {\r\n//           email: Yup.string().email(\"Invalid email\").required(\"Required\"),\r\n//           otp: Yup.string().required(\"OTP is required\"),\r\n//         }\r\n//       : {\r\n//           email: Yup.string().email(\"Invalid email\").required(\"Required\"),\r\n//           password: Yup.string().required(\"Password is required\"),\r\n//         }\r\n//   );\r\n\r\n//   const handleSubmit = async (values: typeof initialValues) => {\r\n//     try {\r\n//       if (loginWithOtp) {\r\n//         const response = await api.post(\"/auth/verify-otp\", {\r\n//           email: values.email,\r\n//           otp: values.otp,\r\n//         });\r\n//         alert(response.data.message);\r\n//       } else {\r\n//         const response = await api.post(\"/auth/login\", {\r\n//           email: values.email,\r\n//           password: values.password,\r\n//         });\r\n//         localStorage.setItem(\"token\", response.data.token);\r\n//         window.location.href = \"/notes\";\r\n//       }\r\n//     } catch (error: any) {\r\n//       alert(error.response?.data?.message || \"Login failed\");\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <Container\r\n//       maxWidth={false}\r\n//       sx={{\r\n//         height: \"100vh\",\r\n//         display: \"flex\",\r\n//         alignItems: \"center\",\r\n//         justifyContent: \"center\",\r\n//       }}\r\n//     >\r\n//       <Grid\r\n//         container\r\n//         spacing={2}\r\n//         sx={{\r\n//           height: \"100%\",\r\n//           boxShadow: 3,\r\n//           borderRadius: 3,\r\n//           overflow: \"hidden\",\r\n//         }}\r\n//       >\r\n//         {/* Left Side - Image */}\r\n//         <Grid\r\n//           item\r\n//           xs={12}\r\n//           md={6}\r\n//           sx={{\r\n//             backgroundImage: \"url('/assets/images/signup-bg.png')\",\r\n//             backgroundSize: \"cover\",\r\n//             backgroundPosition: \"center\",\r\n//           }}\r\n//         ></Grid>\r\n\r\n//         {/* Right Side - Login Form */}\r\n//         <Grid item xs={12} md={6} sx={{ padding: 4 }}>\r\n//           <Box sx={{ padding: 8 }}>\r\n//             <Typography variant=\"h4\" fontWeight=\"bold\" gutterBottom>\r\n//               Login\r\n//             </Typography>\r\n//             <Typography variant=\"body1\" color=\"text.secondary\" mb={4}>\r\n//               Login to continue to HD\r\n//             </Typography>\r\n\r\n//             <Formik\r\n//               initialValues={initialValues}\r\n//               validationSchema={validationSchema}\r\n//               onSubmit={handleSubmit}\r\n//             >\r\n//               {({ errors, touched }) => (\r\n//                 <Form>\r\n//                   <Field\r\n//                     name=\"email\"\r\n//                     as={TextField}\r\n//                     label=\"Email\"\r\n//                     fullWidth\r\n//                     margin=\"normal\"\r\n//                     variant=\"outlined\"\r\n//                     error={touched.email && !!errors.email}\r\n//                     helperText={touched.email && errors.email}\r\n//                   />\r\n\r\n//                   {loginWithOtp ? (\r\n//                     <Field\r\n//                       name=\"otp\"\r\n//                       as={TextField}\r\n//                       label=\"OTP\"\r\n//                       fullWidth\r\n//                       margin=\"normal\"\r\n//                       variant=\"outlined\"\r\n//                       error={touched.otp && !!errors.otp}\r\n//                       helperText={touched.otp && errors.otp}\r\n//                     />\r\n//                   ) : (\r\n//                     <Field\r\n//                       name=\"password\"\r\n//                       as={TextField}\r\n//                       label=\"Password\"\r\n//                       type={showPassword ? \"text\" : \"password\"}\r\n//                       fullWidth\r\n//                       margin=\"normal\"\r\n//                       variant=\"outlined\"\r\n//                       error={touched.password && !!errors.password}\r\n//                       helperText={touched.password && errors.password}\r\n//                       InputProps={{\r\n//                         endAdornment: (\r\n//                           <InputAdornment position=\"end\">\r\n//                             <IconButton\r\n//                               onClick={() => setShowPassword(!showPassword)}\r\n//                             >\r\n//                               {showPassword ? <VisibilityOff /> : <Visibility />}\r\n//                             </IconButton>\r\n//                           </InputAdornment>\r\n//                         ),\r\n//                       }}\r\n//                     />\r\n//                   )}\r\n\r\n//                   <Button\r\n//                     type=\"submit\"\r\n//                     variant=\"contained\"\r\n//                     fullWidth\r\n//                     sx={{ marginY: 2, paddingY: 1.5, backgroundColor: \"#367AFF\" }}\r\n//                   >\r\n//                     {loginWithOtp ? \"Login with OTP\" : \"Login\"}\r\n//                   </Button>\r\n\r\n//                   <Typography\r\n//                     variant=\"body2\"\r\n//                     align=\"center\"\r\n//                     sx={{ cursor: \"pointer\", color: \"#367AFF\" }}\r\n//                     onClick={() => setLoginWithOtp(!loginWithOtp)}\r\n//                   >\r\n//                     {loginWithOtp\r\n//                       ? \"Login with Password instead\"\r\n//                       : \"Login with OTP instead\"}\r\n//                   </Typography>\r\n//                 </Form>\r\n//               )}\r\n//             </Formik>\r\n//           </Box>\r\n//         </Grid>\r\n//       </Grid>\r\n//     </Container>\r\n//   );\r\n// };\r\n\r\n// export default Login;\r\n\r\n\r\n\r\n// import React, { useState } from \"react\";\r\n// import {\r\n//   Container,\r\n//   Grid,\r\n//   Typography,\r\n//   Box,\r\n//   TextField,\r\n//   InputAdornment,\r\n//   IconButton,\r\n//   Button,\r\n// } from \"@mui/material\";\r\n// import { Visibility, VisibilityOff } from \"@mui/icons-material\";\r\n// import { useFormik } from \"formik\";\r\n// import * as Yup from \"yup\";\r\n// import api from \"../../services/api\";\r\n\r\n// const Login: React.FC = () => {\r\n//   const [useOtp, setUseOtp] = useState(false); // Toggle between OTP and password login\r\n//   const [otpSent, setOtpSent] = useState(false); // Track OTP sent status\r\n//   const [showPassword, setShowPassword] = useState(false);\r\n\r\n//   const handleToggleLoginMethod = () => {\r\n//     setUseOtp(!useOtp);\r\n//     setOtpSent(false); // Reset OTP sent status when switching methods\r\n//   };\r\n\r\n//   const handleSendOtp = async (email: string) => {\r\n//     try {\r\n//       await api.post(\"/auth/send-otp\", { email });\r\n//       alert(\"OTP sent successfully to your email\");\r\n//       setOtpSent(true);\r\n//     } catch (error: any) {\r\n//       alert(error.response?.data?.message || \"Failed to send OTP\");\r\n//     }\r\n//   };\r\n\r\n//   const validationSchema = Yup.object({\r\n//     email: Yup.string().email(\"Invalid email\").required(\"Email is required\"),\r\n//     ...(useOtp\r\n//       ? { otp: Yup.string().required(\"OTP is required\") }\r\n//       : { password: Yup.string().required(\"Password is required\") }),\r\n//   });\r\n\r\n//   const formik = useFormik({\r\n//     initialValues: { email: \"\", password: \"\", otp: \"\" },\r\n//     validationSchema,\r\n//     onSubmit: async (values) => {\r\n//       try {\r\n//         if (useOtp) {\r\n//           // Login with OTP\r\n//           await api.post(\"/auth/verify-otp\", { email: values.email, otp: values.otp });\r\n//         } else {\r\n//           // Login with password\r\n//           const response = await api.post(\"/auth/login\", {\r\n//             email: values.email,\r\n//             password: values.password,\r\n//           });\r\n//           localStorage.setItem(\"token\", response.data.token);\r\n//         }\r\n//         window.location.href = \"/notes\";\r\n//       } catch (error: any) {\r\n//         alert(error.response?.data?.message || \"Login failed\");\r\n//       }\r\n//     },\r\n//   });\r\n\r\n//   return (\r\n//     <Container\r\n//       maxWidth={false}\r\n//       sx={{\r\n//         height: \"100vh\",\r\n//         display: \"flex\",\r\n//         alignItems: \"center\",\r\n//         justifyContent: \"center\",\r\n//       }}\r\n//     >\r\n//       <Grid\r\n//         container\r\n//         spacing={2}\r\n//         sx={{\r\n//           height: \"100%\",\r\n//           boxShadow: 3,\r\n//           borderRadius: 3,\r\n//           overflow: \"hidden\",\r\n//         }}\r\n//       >\r\n//         {/* Left Side - Image */}\r\n//         <Grid\r\n//           item\r\n//           xs={12}\r\n//           md={6}\r\n//           sx={{\r\n//             backgroundImage: \"url('/assets/images/signup-bg.png')\",\r\n//             backgroundSize: \"cover\",\r\n//             backgroundPosition: \"center\",\r\n//           }}\r\n//         ></Grid>\r\n\r\n//         {/* Right Side - Login Form */}\r\n//         <Grid item xs={12} md={6} sx={{ padding: 4 }}>\r\n//           <Typography variant=\"h4\" fontWeight=\"bold\" gutterBottom>\r\n//             Login\r\n//           </Typography>\r\n//           <Typography variant=\"body1\" color=\"text.secondary\" mb={4}>\r\n//             Login to access your account\r\n//           </Typography>\r\n//           <Box component=\"form\" noValidate onSubmit={formik.handleSubmit}>\r\n//             <TextField\r\n//               label=\"Email\"\r\n//               name=\"email\"\r\n//               fullWidth\r\n//               margin=\"normal\"\r\n//               variant=\"outlined\"\r\n//               value={formik.values.email}\r\n//               onChange={formik.handleChange}\r\n//               error={formik.touched.email && !!formik.errors.email}\r\n//               helperText={formik.touched.email && formik.errors.email}\r\n//             />\r\n//             {useOtp ? (\r\n//               <>\r\n//                 {otpSent ? (\r\n//                   <TextField\r\n//                     label=\"OTP\"\r\n//                     name=\"otp\"\r\n//                     fullWidth\r\n//                     margin=\"normal\"\r\n//                     variant=\"outlined\"\r\n//                     value={formik.values.otp}\r\n//                     onChange={formik.handleChange}\r\n//                     error={formik.touched.otp && !!formik.errors.otp}\r\n//                     helperText={formik.touched.otp && formik.errors.otp}\r\n//                   />\r\n//                 ) : (\r\n//                   <Button\r\n//                     variant=\"contained\"\r\n//                     fullWidth\r\n//                     sx={{ marginY: 2, paddingY: 1.5 }}\r\n//                     onClick={() => handleSendOtp(formik.values.email)}\r\n//                     disabled={!formik.values.email || !!formik.errors.email}\r\n//                   >\r\n//                     Send OTP\r\n//                   </Button>\r\n//                 )}\r\n//               </>\r\n//             ) : (\r\n//               <TextField\r\n//                 label=\"Password\"\r\n//                 name=\"password\"\r\n//                 fullWidth\r\n//                 margin=\"normal\"\r\n//                 variant=\"outlined\"\r\n//                 type={showPassword ? \"text\" : \"password\"}\r\n//                 value={formik.values.password}\r\n//                 onChange={formik.handleChange}\r\n//                 error={formik.touched.password && !!formik.errors.password}\r\n//                 helperText={formik.touched.password && formik.errors.password}\r\n//                 InputProps={{\r\n//                   endAdornment: (\r\n//                     <InputAdornment position=\"end\">\r\n//                       <IconButton onClick={() => setShowPassword(!showPassword)}>\r\n//                         {showPassword ? <VisibilityOff /> : <Visibility />}\r\n//                       </IconButton>\r\n//                     </InputAdornment>\r\n//                   ),\r\n//                 }}\r\n//               />\r\n//             )}\r\n//             <Button\r\n//               type=\"submit\"\r\n//               variant=\"contained\"\r\n//               fullWidth\r\n//               sx={{ marginY: 2, paddingY: 1.5 }}\r\n//             >\r\n//               {useOtp ? (otpSent ? \"Verify OTP\" : \"Send OTP\") : \"Login\"}\r\n//             </Button>\r\n//           </Box>\r\n//           <Typography\r\n//             align=\"center\"\r\n//             variant=\"body2\"\r\n//             sx={{ cursor: \"pointer\" }}\r\n//             onClick={handleToggleLoginMethod}\r\n//           >\r\n//             {useOtp ? \"Login with Password\" : \"Login with OTP\"}\r\n//           </Typography>\r\n//         </Grid>\r\n//       </Grid>\r\n//     </Container>\r\n//   );\r\n// };\r\n\r\n// export default Login;\r\n\r\nimport React, { useState } from \"react\";\r\nimport {\r\n  Container,\r\n  Grid,\r\n  Typography,\r\n  Box,\r\n  TextField,\r\n  Button,\r\n  InputAdornment,\r\n  IconButton,\r\n} from \"@mui/material\";\r\nimport { Visibility, VisibilityOff } from \"@mui/icons-material\";\r\nimport { Formik, Form, Field } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport api from \"../../services/api\";\r\n\r\nconst Login: React.FC = () => {\r\n  const [useOtp, setUseOtp] = useState(false);\r\n  const [otpSent, setOtpSent] = useState(false);\r\n  const [showPassword, setShowPassword] = useState(false);\r\n\r\n  const initialValues = { email: \"\", password: \"\", otp: \"\" };\r\n\r\n  const validationSchema = Yup.object({\r\n    email: Yup.string().email(\"Invalid email\").required(\"Required\"),\r\n    password: Yup.string().when(\"otp\", {\r\n      is: (otp) => !otp,\r\n      then: Yup.string().required(\"Password is required\"),\r\n    }),\r\n    otp: Yup.string().when(\"password\", {\r\n      is: (password) => !password,\r\n      then: Yup.string().required(\"OTP is required\"),\r\n    }),\r\n  });\r\n\r\n  const handleSendOtp = async (email: string) => {\r\n    try {\r\n      await api.post(\"/auth/send-otp\", { email });\r\n      alert(\"OTP sent successfully\");\r\n      setOtpSent(true);\r\n    } catch (error: any) {\r\n      alert(error.response?.data?.message || \"Failed to send OTP\");\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (values: typeof initialValues) => {\r\n    try {\r\n      if (useOtp) {\r\n        // OTP-based login\r\n        const response = await api.post(\"/auth/verify-otp\", {\r\n          email: values.email,\r\n          otp: values.otp,\r\n        });\r\n        localStorage.setItem(\"token\", response.data.token);\r\n      } else {\r\n        // Password-based login\r\n        const response = await api.post(\"/auth/login\", {\r\n          email: values.email,\r\n          password: values.password,\r\n        });\r\n        localStorage.setItem(\"token\", response.data.token);\r\n      }\r\n      window.location.href = \"/notes\";\r\n    } catch (error: any) {\r\n      alert(error.response?.data?.message || \"Login failed\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container\r\n      maxWidth={false}\r\n      sx={{\r\n        height: \"100vh\",\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n      }}\r\n    >\r\n      <Grid\r\n        container\r\n        spacing={2}\r\n        sx={{\r\n          height: \"100%\",\r\n          boxShadow: 3,\r\n          borderRadius: 3,\r\n          overflow: \"hidden\",\r\n        }}\r\n      >\r\n        {/* Left Side - Image */}\r\n        <Grid\r\n          item\r\n          xs={12}\r\n          md={6}\r\n          sx={{\r\n            backgroundImage: \"url('/assets/images/signup-bg.png')\",\r\n            backgroundSize: \"cover\",\r\n            backgroundPosition: \"center\",\r\n          }}\r\n        ></Grid>\r\n\r\n        {/* Right Side - Login Form */}\r\n        <Grid item xs={12} md={6} sx={{ padding: 4 }}>\r\n          <Box component=\"div\" noValidate autoComplete=\"off\" sx={{ padding: 9 }}>\r\n            <Typography variant=\"h4\" fontWeight=\"bold\" gutterBottom>\r\n              Login\r\n            </Typography>\r\n            <Typography variant=\"body1\" color=\"text.secondary\" mb={4}>\r\n              Login with your email and password or OTP\r\n            </Typography>\r\n            <Formik\r\n              initialValues={initialValues}\r\n              validationSchema={validationSchema}\r\n              onSubmit={handleSubmit}\r\n            >\r\n              {({ errors, touched, values }) => (\r\n                <Form>\r\n                  <Field\r\n                    name=\"email\"\r\n                    as={TextField}\r\n                    label=\"Email\"\r\n                    fullWidth\r\n                    margin=\"normal\"\r\n                    error={touched.email && !!errors.email}\r\n                    helperText={touched.email && errors.email}\r\n                  />\r\n\r\n                  {useOtp ? (\r\n                    <TextField\r\n                      label=\"OTP\"\r\n                      name=\"otp\"\r\n                      fullWidth\r\n                      margin=\"normal\"\r\n                      value={values.otp}\r\n                      onChange={(e) => (values.otp = e.target.value)}\r\n                      error={touched.otp && !!errors.otp}\r\n                      helperText={touched.otp && errors.otp}\r\n                    />\r\n                  ) : (\r\n                    <TextField\r\n                      label=\"Password\"\r\n                      name=\"password\"\r\n                      type={showPassword ? \"text\" : \"password\"}\r\n                      fullWidth\r\n                      margin=\"normal\"\r\n                      value={values.password}\r\n                      onChange={(e) => (values.password = e.target.value)}\r\n                      error={touched.password && !!errors.password}\r\n                      helperText={touched.password && errors.password}\r\n                      InputProps={{\r\n                        endAdornment: (\r\n                          <InputAdornment position=\"end\">\r\n                            <IconButton\r\n                              onClick={() => setShowPassword(!showPassword)}\r\n                            >\r\n                              {showPassword ? <VisibilityOff /> : <Visibility />}\r\n                            </IconButton>\r\n                          </InputAdornment>\r\n                        ),\r\n                      }}\r\n                    />\r\n                  )}\r\n\r\n                  {useOtp && !otpSent && (\r\n                    <Button\r\n                      variant=\"outlined\"\r\n                      fullWidth\r\n                      sx={{ marginY: 1.5 }}\r\n                      onClick={() => handleSendOtp(values.email)}\r\n                    >\r\n                      Send OTP\r\n                    </Button>\r\n                  )}\r\n\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    fullWidth\r\n                    sx={{ marginY: 2, paddingY: 1.5, backgroundColor: \"#367AFF\" }}\r\n                  >\r\n                    {useOtp ? \"Login with OTP\" : \"Login\"}\r\n                  </Button>\r\n                </Form>\r\n              )}\r\n            </Formik>\r\n            <Typography\r\n              variant=\"body2\"\r\n              align=\"center\"\r\n              sx={{ cursor: \"pointer\", marginTop: 2 }}\r\n              onClick={() => setUseOtp(!useOtp)}\r\n            >\r\n              {useOtp ? \"Login with Password\" : \"Login with OTP\"}\r\n            </Typography>\r\n          </Box>\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}