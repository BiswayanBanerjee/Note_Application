{"ast":null,"code":"var _jsxFileName = \"D:\\\\Study\\\\Code\\\\Self-Projects\\\\NoteApp\\\\note-taking-frontend\\\\src\\\\components\\\\Notes\\\\NotesList.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Button, Box, Typography, Grid } from \"@mui/material\";\nimport api from \"../../services/api\";\nimport NoteItem from \"./NoteItem\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotesList = () => {\n  _s();\n  const [notes, setNotes] = useState([]);\n  const fetchNotes = async () => {\n    try {\n      const response = await api.get(\"/notes\");\n      setNotes(response.data);\n    } catch (error) {\n      console.error(\"Error fetching notes:\", error);\n    }\n  };\n  useEffect(() => {\n    fetchNotes();\n  }, []);\n  const handleDelete = id => {\n    setNotes(notes.filter(note => note._id !== id));\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    p: 2,\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      children: \"Your Notes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      href: \"/create-note\",\n      children: \"Create Note\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      mt: 2,\n      children: notes.map(note => /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        sm: 6,\n        md: 4,\n        children: /*#__PURE__*/_jsxDEV(NoteItem, {\n          note: note,\n          onDelete: handleDelete\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 13\n        }, this)\n      }, note._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s(NotesList, \"vOaC7rmji7ux6HtcIeocV+tl1oY=\");\n_c = NotesList;\nexport default NotesList;\n\n// import React, { useEffect, useState } from \"react\";\n// import { Button, Box, Typography, Grid, Card, CardContent, IconButton } from \"@mui/material\";\n// import { Delete } from \"@mui/icons-material\";\n// import api from \"../../services/api\";\n\n// const Dashboard: React.FC = () => {\n//   interface Note {\n//     _id: string;\n//     title: string;\n//     content: string;\n//   }\n\n//   const [notes, setNotes] = useState<Note[]>([]);\n\n//   const fetchNotes = async () => {\n//     try {\n//       const response = await api.get(\"/notes\");\n//       setNotes(response.data);\n//     } catch (error) {\n//       console.error(\"Error fetching notes:\", error);\n//     }\n//   };\n\n//   const handleDelete = async (id: string) => {\n//     try {\n//       await api.delete(`/notes/${id}`);\n//       setNotes(notes.filter((note) => note._id !== id));\n//     } catch (error) {\n//       console.error(\"Error deleting note:\", error);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchNotes();\n//   }, []);\n\n//   const truncateContent = (content: string, maxLength: number = 15) =>\n//     content.length > maxLength ? `${content.slice(0, maxLength)}..` : content;\n\n//   return (\n//     <Box\n//       sx={{\n//         p: 2,\n//         display: \"flex\",\n//         flexDirection: \"column\",\n//         alignItems: \"center\",\n//         height: \"100vh\",\n//         backgroundColor: \"#f9f9f9\",\n//       }}\n//     >\n//       {/* Top Bar */}\n//       <Box\n//         sx={{\n//           width: \"100%\",\n//           display: \"flex\",\n//           justifyContent: \"space-between\",\n//           alignItems: \"center\",\n//           mb: 2,\n//         }}\n//       >\n//         <Typography variant=\"h6\" sx={{ fontWeight: \"bold\" }}>\n//           Dashboard\n//         </Typography>\n//         <Button variant=\"text\" color=\"primary\" href=\"/logout\">\n//           Sign Out\n//         </Button>\n//       </Box>\n\n//       {/* Welcome Card */}\n//       <Card\n//         sx={{\n//           width: \"100%\",\n//           maxWidth: 500,\n//           mb: 3,\n//           p: 2,\n//           textAlign: \"center\",\n//           boxShadow: 2,\n//           borderRadius: \"10px\",\n//         }}\n//       >\n//         <CardContent>\n//           <Typography variant=\"h6\" fontWeight=\"bold\">\n//             Welcome, Jonas Kahnwald!\n//           </Typography>\n//           <Typography variant=\"body2\" color=\"text.secondary\">\n//             Email: xxxxxx@xxxx.com\n//           </Typography>\n//         </CardContent>\n//       </Card>\n\n//       {/* Create Note Button */}\n//       <Button\n//         variant=\"contained\"\n//         href=\"/create-note\"\n//         sx={{\n//           width: \"100%\",\n//           maxWidth: 300,\n//           mb: 3,\n//           py: 1.5,\n//           fontWeight: \"bold\",\n//           backgroundColor: \"#367AFF\",\n//           borderRadius: \"10px\",\n//         }}\n//       >\n//         <Typography\n//           variant=\"button\"\n//           sx={{\n//             color: \"#FFF\",\n//             fontFamily: \"Inter\",\n//             fontSize: \"16px\",\n//             fontStyle: \"normal\",\n//             fontWeight: 600,\n//             lineHeight: \"120%\",\n//             letterSpacing: \"-0.16px\",\n//           }}\n//         >\n//           Create Note\n//         </Typography>\n//       </Button>\n\n//       {/* Notes List */}\n//       <Box\n//         sx={{\n//           width: \"100%\",\n//           maxWidth: 500,\n//           flexGrow: 1,\n//           overflowY: \"auto\",\n//         }}\n//       >\n//         <Typography variant=\"h6\" gutterBottom>\n//           Notes\n//         </Typography>\n//         <Grid container spacing={2}>\n//           {notes.map((note, index) => (\n//             <Grid item xs={12} key={note._id}>\n//               <Card\n//                 sx={{\n//                   display: \"flex\",\n//                   justifyContent: \"space-between\",\n//                   alignItems: \"center\",\n//                   boxShadow: 1,\n//                   borderRadius: \"8px\",\n//                   p: 1.5,\n//                   backgroundColor: \"#fff\",\n//                 }}\n//               >\n//                 <Box>\n//                   <Typography variant=\"subtitle1\" fontWeight=\"bold\">\n//                     Note {index + 1}: {note.title}\n//                   </Typography>\n//                   <Typography variant=\"body2\" color=\"text.secondary\">\n//                     {truncateContent(note.content)}\n//                   </Typography>\n//                 </Box>\n//                 <IconButton\n//                   aria-label=\"delete\"\n//                   onClick={() => handleDelete(note._id)}\n//                   sx={{\n//                     border: \"1px solid #ccc\",\n//                     borderRadius: \"50%\",\n//                     backgroundColor: \"#fff\",\n//                     color: \"#000\",\n//                     \"&:hover\": {\n//                       backgroundColor: \"#f5f5f5\",\n//                     },\n//                   }}\n//                 >\n//                   <Delete />\n//                 </IconButton>\n//               </Card>\n//             </Grid>\n//           ))}\n//         </Grid>\n//       </Box>\n//     </Box>\n//   );\n// };\n\n// export default Dashboard;\n\n// import React, { useEffect, useState } from \"react\";\n// import {\n//   Button,\n//   Box,\n//   Typography,\n//   Grid,\n//   Card,\n//   CardContent,\n//   IconButton,\n// } from \"@mui/material\";\n// import { Delete } from \"@mui/icons-material\";\n// import api from \"../../services/api\";\n\n// const Dashboard: React.FC = () => {\n//   interface Note {\n//     _id: string;\n//     title: string;\n//     content: string;\n//   }\n\n//   const [notes, setNotes] = useState<Note[]>([]);\n\n//   const fetchNotes = async () => {\n//     try {\n//       const response = await api.get(\"/notes\");\n//       setNotes(response.data);\n//     } catch (error) {\n//       console.error(\"Error fetching notes:\", error);\n//     }\n//   };\n\n//   const handleDelete = async (id: string) => {\n//     try {\n//       await api.delete(`/notes/${id}`);\n//       setNotes(notes.filter((note) => note._id !== id));\n//     } catch (error) {\n//       console.error(\"Error deleting note:\", error);\n//     }\n//   };\n\n//   const truncateContent = (content: string, maxLength: number = 15) =>\n//     content.length > maxLength ? `${content.slice(0, maxLength)}..` : content;\n\n//   useEffect(() => {\n//     fetchNotes();\n//   }, []);\n\n//   return (\n//     <Box\n//       sx={{\n//         position: \"relative\",\n//         width: \"100%\",\n//         height: \"100vh\",\n//         overflow: \"hidden\",\n//       }}\n//     >\n//       {/* Background Image */}\n//       <Box\n//         sx={{\n//           position: \"absolute\",\n//           top: 0,\n//           left: 0,\n//           width: \"100%\",\n//           height: \"100%\",\n//           backgroundImage: \"url(/assets/images/bg-img.png)\",\n//           backgroundSize: \"cover\",\n//           backgroundPosition: \"center\",\n//           opacity: 0.9,\n//           zIndex: -5,\n//         }}\n//       />\n\n//       {/* Main Content */}\n//       <Box\n//         sx={{\n//           p: 2,\n//           display: \"flex\",\n//           flexDirection: \"column\",\n//           alignItems: \"center\",\n//           height: \"100%\",\n//           backgroundColor: \"rgba(255, 255, 255, 0.5)\", // Optional for readability\n//         }}\n//       >\n//         {/* Top Bar */}\n//         <Box\n//           sx={{\n//             width: \"100%\",\n//             display: \"flex\",\n//             justifyContent: \"space-between\",\n//             alignItems: \"center\",\n//             mb: 2,\n//           }}\n//         >\n//           <Typography variant=\"h6\" sx={{ fontWeight: \"bold\" }}>\n//             Dashboard\n//           </Typography>\n//           <Button variant=\"text\" color=\"primary\" href=\"/logout\">\n//             Sign Out\n//           </Button>\n//         </Box>\n\n//         {/* Welcome Card */}\n//         <Card\n//           sx={{\n//             width: \"100%\",\n//             maxWidth: 500,\n//             mb: 3,\n//             p: 2,\n//             textAlign: \"center\",\n//             boxShadow: 2,\n//             borderRadius: \"10px\",\n//           }}\n//         >\n//           <CardContent>\n//             <Typography variant=\"h6\" fontWeight=\"bold\">\n//               Welcome, Jonas Kahnwald!\n//             </Typography>\n//             <Typography variant=\"body2\" color=\"text.secondary\">\n//               Email: xxxxxx@xxxx.com\n//             </Typography>\n//           </CardContent>\n//         </Card>\n\n//         {/* Create Note Button */}\n//         <Button\n//           variant=\"contained\"\n//           href=\"/create-note\"\n//           sx={{\n//             width: \"100%\",\n//             maxWidth: 300,\n//             mb: 3,\n//             py: 1.5,\n//             fontWeight: \"bold\",\n//             backgroundColor: \"#367AFF\",\n//             borderRadius: \"10px\",\n//           }}\n//         >\n//           <Typography\n//             variant=\"button\"\n//             sx={{\n//               color: \"#FFF\",\n//               fontFamily: \"Inter\",\n//               fontSize: \"16px\",\n//               fontStyle: \"normal\",\n//               fontWeight: 600,\n//               lineHeight: \"120%\",\n//               letterSpacing: \"-0.16px\",\n//             }}\n//           >\n//             Create Note\n//           </Typography>\n//         </Button>\n\n//         {/* Notes List */}\n//         <Box\n//           sx={{\n//             width: \"100%\",\n//             maxWidth: 500,\n//             flexGrow: 1,\n//             overflowY: \"auto\",\n//           }}\n//         >\n//           <Typography variant=\"h6\" gutterBottom>\n//             Notes\n//           </Typography>\n//           <Grid container spacing={2}>\n//             {notes.map((note, index) => (\n//               <Grid item xs={12} key={note._id}>\n//                 <Card\n//                   sx={{\n//                     display: \"flex\",\n//                     justifyContent: \"space-between\",\n//                     alignItems: \"center\",\n//                     boxShadow: 1,\n//                     borderRadius: \"8px\",\n//                     p: 1.5,\n//                     backgroundColor: \"#fff\",\n//                   }}\n//                 >\n//                   <Box>\n//                     <Typography variant=\"subtitle1\" fontWeight=\"bold\">\n//                       Note {index + 1}: {note.title}\n//                     </Typography>\n//                     <Typography variant=\"body2\" color=\"text.secondary\">\n//                       {truncateContent(note.content)}\n//                     </Typography>\n//                   </Box>\n//                   <IconButton\n//                     aria-label=\"delete\"\n//                     onClick={() => handleDelete(note._id)}\n//                     sx={{\n//                       border: \"1px solid #ccc\",\n//                       borderRadius: \"50%\",\n//                       backgroundColor: \"#fff\",\n//                       color: \"#000\",\n//                       \"&:hover\": {\n//                         backgroundColor: \"#f5f5f5\",\n//                       },\n//                     }}\n//                   >\n//                     <Delete />\n//                   </IconButton>\n//                 </Card>\n//               </Grid>\n//             ))}\n//           </Grid>\n//         </Box>\n//       </Box>\n//     </Box>\n//   );\n// };\n\n// export default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"NotesList\");","map":{"version":3,"names":["React","useEffect","useState","Button","Box","Typography","Grid","api","NoteItem","jsxDEV","_jsxDEV","NotesList","_s","notes","setNotes","fetchNotes","response","get","data","error","console","handleDelete","id","filter","note","_id","p","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","color","href","container","spacing","mt","map","item","xs","sm","md","onDelete","_c","$RefreshReg$"],"sources":["D:/Study/Code/Self-Projects/NoteApp/note-taking-frontend/src/components/Notes/NotesList.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Button, Box, Typography, Grid } from \"@mui/material\";\r\nimport api from \"../../services/api\";\r\nimport NoteItem from \"./NoteItem\";\r\n\r\nconst NotesList: React.FC = () => {\r\n  interface Note {\r\n    _id: string;\r\n    // add other properties of Note here\r\n  }\r\n\r\n  const [notes, setNotes] = useState<Note[]>([]);\r\n\r\n  const fetchNotes = async () => {\r\n    try {\r\n      const response = await api.get(\"/notes\");\r\n      setNotes(response.data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching notes:\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchNotes();\r\n  }, []);\r\n\r\n  const handleDelete = (id: string) => {\r\n    setNotes(notes.filter(note => note._id !== id));\r\n  };\r\n\r\n  return (\r\n    <Box p={2}>\r\n      <Typography variant=\"h4\" gutterBottom>Your Notes</Typography>\r\n      <Button variant=\"contained\" color=\"primary\" href=\"/create-note\">Create Note</Button>\r\n      <Grid container spacing={2} mt={2}>\r\n        {notes.map((note: any) => (\r\n          <Grid item xs={12} sm={6} md={4} key={note._id}>\r\n            <NoteItem note={note} onDelete={handleDelete} />\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default NotesList;\r\n\r\n\r\n\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n// import { Button, Box, Typography, Grid, Card, CardContent, IconButton } from \"@mui/material\";\r\n// import { Delete } from \"@mui/icons-material\";\r\n// import api from \"../../services/api\";\r\n\r\n// const Dashboard: React.FC = () => {\r\n//   interface Note {\r\n//     _id: string;\r\n//     title: string;\r\n//     content: string;\r\n//   }\r\n\r\n//   const [notes, setNotes] = useState<Note[]>([]);\r\n\r\n//   const fetchNotes = async () => {\r\n//     try {\r\n//       const response = await api.get(\"/notes\");\r\n//       setNotes(response.data);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching notes:\", error);\r\n//     }\r\n//   };\r\n\r\n//   const handleDelete = async (id: string) => {\r\n//     try {\r\n//       await api.delete(`/notes/${id}`);\r\n//       setNotes(notes.filter((note) => note._id !== id));\r\n//     } catch (error) {\r\n//       console.error(\"Error deleting note:\", error);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetchNotes();\r\n//   }, []);\r\n\r\n//   const truncateContent = (content: string, maxLength: number = 15) =>\r\n//     content.length > maxLength ? `${content.slice(0, maxLength)}..` : content;\r\n\r\n//   return (\r\n//     <Box\r\n//       sx={{\r\n//         p: 2,\r\n//         display: \"flex\",\r\n//         flexDirection: \"column\",\r\n//         alignItems: \"center\",\r\n//         height: \"100vh\",\r\n//         backgroundColor: \"#f9f9f9\",\r\n//       }}\r\n//     >\r\n//       {/* Top Bar */}\r\n//       <Box\r\n//         sx={{\r\n//           width: \"100%\",\r\n//           display: \"flex\",\r\n//           justifyContent: \"space-between\",\r\n//           alignItems: \"center\",\r\n//           mb: 2,\r\n//         }}\r\n//       >\r\n//         <Typography variant=\"h6\" sx={{ fontWeight: \"bold\" }}>\r\n//           Dashboard\r\n//         </Typography>\r\n//         <Button variant=\"text\" color=\"primary\" href=\"/logout\">\r\n//           Sign Out\r\n//         </Button>\r\n//       </Box>\r\n\r\n//       {/* Welcome Card */}\r\n//       <Card\r\n//         sx={{\r\n//           width: \"100%\",\r\n//           maxWidth: 500,\r\n//           mb: 3,\r\n//           p: 2,\r\n//           textAlign: \"center\",\r\n//           boxShadow: 2,\r\n//           borderRadius: \"10px\",\r\n//         }}\r\n//       >\r\n//         <CardContent>\r\n//           <Typography variant=\"h6\" fontWeight=\"bold\">\r\n//             Welcome, Jonas Kahnwald!\r\n//           </Typography>\r\n//           <Typography variant=\"body2\" color=\"text.secondary\">\r\n//             Email: xxxxxx@xxxx.com\r\n//           </Typography>\r\n//         </CardContent>\r\n//       </Card>\r\n\r\n//       {/* Create Note Button */}\r\n//       <Button\r\n//         variant=\"contained\"\r\n//         href=\"/create-note\"\r\n//         sx={{\r\n//           width: \"100%\",\r\n//           maxWidth: 300,\r\n//           mb: 3,\r\n//           py: 1.5,\r\n//           fontWeight: \"bold\",\r\n//           backgroundColor: \"#367AFF\",\r\n//           borderRadius: \"10px\",\r\n//         }}\r\n//       >\r\n//         <Typography\r\n//           variant=\"button\"\r\n//           sx={{\r\n//             color: \"#FFF\",\r\n//             fontFamily: \"Inter\",\r\n//             fontSize: \"16px\",\r\n//             fontStyle: \"normal\",\r\n//             fontWeight: 600,\r\n//             lineHeight: \"120%\",\r\n//             letterSpacing: \"-0.16px\",\r\n//           }}\r\n//         >\r\n//           Create Note\r\n//         </Typography>\r\n//       </Button>\r\n\r\n//       {/* Notes List */}\r\n//       <Box\r\n//         sx={{\r\n//           width: \"100%\",\r\n//           maxWidth: 500,\r\n//           flexGrow: 1,\r\n//           overflowY: \"auto\",\r\n//         }}\r\n//       >\r\n//         <Typography variant=\"h6\" gutterBottom>\r\n//           Notes\r\n//         </Typography>\r\n//         <Grid container spacing={2}>\r\n//           {notes.map((note, index) => (\r\n//             <Grid item xs={12} key={note._id}>\r\n//               <Card\r\n//                 sx={{\r\n//                   display: \"flex\",\r\n//                   justifyContent: \"space-between\",\r\n//                   alignItems: \"center\",\r\n//                   boxShadow: 1,\r\n//                   borderRadius: \"8px\",\r\n//                   p: 1.5,\r\n//                   backgroundColor: \"#fff\",\r\n//                 }}\r\n//               >\r\n//                 <Box>\r\n//                   <Typography variant=\"subtitle1\" fontWeight=\"bold\">\r\n//                     Note {index + 1}: {note.title}\r\n//                   </Typography>\r\n//                   <Typography variant=\"body2\" color=\"text.secondary\">\r\n//                     {truncateContent(note.content)}\r\n//                   </Typography>\r\n//                 </Box>\r\n//                 <IconButton\r\n//                   aria-label=\"delete\"\r\n//                   onClick={() => handleDelete(note._id)}\r\n//                   sx={{\r\n//                     border: \"1px solid #ccc\",\r\n//                     borderRadius: \"50%\",\r\n//                     backgroundColor: \"#fff\",\r\n//                     color: \"#000\",\r\n//                     \"&:hover\": {\r\n//                       backgroundColor: \"#f5f5f5\",\r\n//                     },\r\n//                   }}\r\n//                 >\r\n//                   <Delete />\r\n//                 </IconButton>\r\n//               </Card>\r\n//             </Grid>\r\n//           ))}\r\n//         </Grid>\r\n//       </Box>\r\n//     </Box>\r\n//   );\r\n// };\r\n\r\n// export default Dashboard;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n// import {\r\n//   Button,\r\n//   Box,\r\n//   Typography,\r\n//   Grid,\r\n//   Card,\r\n//   CardContent,\r\n//   IconButton,\r\n// } from \"@mui/material\";\r\n// import { Delete } from \"@mui/icons-material\";\r\n// import api from \"../../services/api\";\r\n\r\n// const Dashboard: React.FC = () => {\r\n//   interface Note {\r\n//     _id: string;\r\n//     title: string;\r\n//     content: string;\r\n//   }\r\n\r\n//   const [notes, setNotes] = useState<Note[]>([]);\r\n\r\n//   const fetchNotes = async () => {\r\n//     try {\r\n//       const response = await api.get(\"/notes\");\r\n//       setNotes(response.data);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching notes:\", error);\r\n//     }\r\n//   };\r\n\r\n//   const handleDelete = async (id: string) => {\r\n//     try {\r\n//       await api.delete(`/notes/${id}`);\r\n//       setNotes(notes.filter((note) => note._id !== id));\r\n//     } catch (error) {\r\n//       console.error(\"Error deleting note:\", error);\r\n//     }\r\n//   };\r\n\r\n//   const truncateContent = (content: string, maxLength: number = 15) =>\r\n//     content.length > maxLength ? `${content.slice(0, maxLength)}..` : content;\r\n\r\n//   useEffect(() => {\r\n//     fetchNotes();\r\n//   }, []);\r\n\r\n//   return (\r\n//     <Box\r\n//       sx={{\r\n//         position: \"relative\",\r\n//         width: \"100%\",\r\n//         height: \"100vh\",\r\n//         overflow: \"hidden\",\r\n//       }}\r\n//     >\r\n//       {/* Background Image */}\r\n//       <Box\r\n//         sx={{\r\n//           position: \"absolute\",\r\n//           top: 0,\r\n//           left: 0,\r\n//           width: \"100%\",\r\n//           height: \"100%\",\r\n//           backgroundImage: \"url(/assets/images/bg-img.png)\",\r\n//           backgroundSize: \"cover\",\r\n//           backgroundPosition: \"center\",\r\n//           opacity: 0.9,\r\n//           zIndex: -5,\r\n//         }}\r\n//       />\r\n\r\n//       {/* Main Content */}\r\n//       <Box\r\n//         sx={{\r\n//           p: 2,\r\n//           display: \"flex\",\r\n//           flexDirection: \"column\",\r\n//           alignItems: \"center\",\r\n//           height: \"100%\",\r\n//           backgroundColor: \"rgba(255, 255, 255, 0.5)\", // Optional for readability\r\n//         }}\r\n//       >\r\n//         {/* Top Bar */}\r\n//         <Box\r\n//           sx={{\r\n//             width: \"100%\",\r\n//             display: \"flex\",\r\n//             justifyContent: \"space-between\",\r\n//             alignItems: \"center\",\r\n//             mb: 2,\r\n//           }}\r\n//         >\r\n//           <Typography variant=\"h6\" sx={{ fontWeight: \"bold\" }}>\r\n//             Dashboard\r\n//           </Typography>\r\n//           <Button variant=\"text\" color=\"primary\" href=\"/logout\">\r\n//             Sign Out\r\n//           </Button>\r\n//         </Box>\r\n\r\n//         {/* Welcome Card */}\r\n//         <Card\r\n//           sx={{\r\n//             width: \"100%\",\r\n//             maxWidth: 500,\r\n//             mb: 3,\r\n//             p: 2,\r\n//             textAlign: \"center\",\r\n//             boxShadow: 2,\r\n//             borderRadius: \"10px\",\r\n//           }}\r\n//         >\r\n//           <CardContent>\r\n//             <Typography variant=\"h6\" fontWeight=\"bold\">\r\n//               Welcome, Jonas Kahnwald!\r\n//             </Typography>\r\n//             <Typography variant=\"body2\" color=\"text.secondary\">\r\n//               Email: xxxxxx@xxxx.com\r\n//             </Typography>\r\n//           </CardContent>\r\n//         </Card>\r\n\r\n//         {/* Create Note Button */}\r\n//         <Button\r\n//           variant=\"contained\"\r\n//           href=\"/create-note\"\r\n//           sx={{\r\n//             width: \"100%\",\r\n//             maxWidth: 300,\r\n//             mb: 3,\r\n//             py: 1.5,\r\n//             fontWeight: \"bold\",\r\n//             backgroundColor: \"#367AFF\",\r\n//             borderRadius: \"10px\",\r\n//           }}\r\n//         >\r\n//           <Typography\r\n//             variant=\"button\"\r\n//             sx={{\r\n//               color: \"#FFF\",\r\n//               fontFamily: \"Inter\",\r\n//               fontSize: \"16px\",\r\n//               fontStyle: \"normal\",\r\n//               fontWeight: 600,\r\n//               lineHeight: \"120%\",\r\n//               letterSpacing: \"-0.16px\",\r\n//             }}\r\n//           >\r\n//             Create Note\r\n//           </Typography>\r\n//         </Button>\r\n\r\n//         {/* Notes List */}\r\n//         <Box\r\n//           sx={{\r\n//             width: \"100%\",\r\n//             maxWidth: 500,\r\n//             flexGrow: 1,\r\n//             overflowY: \"auto\",\r\n//           }}\r\n//         >\r\n//           <Typography variant=\"h6\" gutterBottom>\r\n//             Notes\r\n//           </Typography>\r\n//           <Grid container spacing={2}>\r\n//             {notes.map((note, index) => (\r\n//               <Grid item xs={12} key={note._id}>\r\n//                 <Card\r\n//                   sx={{\r\n//                     display: \"flex\",\r\n//                     justifyContent: \"space-between\",\r\n//                     alignItems: \"center\",\r\n//                     boxShadow: 1,\r\n//                     borderRadius: \"8px\",\r\n//                     p: 1.5,\r\n//                     backgroundColor: \"#fff\",\r\n//                   }}\r\n//                 >\r\n//                   <Box>\r\n//                     <Typography variant=\"subtitle1\" fontWeight=\"bold\">\r\n//                       Note {index + 1}: {note.title}\r\n//                     </Typography>\r\n//                     <Typography variant=\"body2\" color=\"text.secondary\">\r\n//                       {truncateContent(note.content)}\r\n//                     </Typography>\r\n//                   </Box>\r\n//                   <IconButton\r\n//                     aria-label=\"delete\"\r\n//                     onClick={() => handleDelete(note._id)}\r\n//                     sx={{\r\n//                       border: \"1px solid #ccc\",\r\n//                       borderRadius: \"50%\",\r\n//                       backgroundColor: \"#fff\",\r\n//                       color: \"#000\",\r\n//                       \"&:hover\": {\r\n//                         backgroundColor: \"#f5f5f5\",\r\n//                       },\r\n//                     }}\r\n//                   >\r\n//                     <Delete />\r\n//                   </IconButton>\r\n//                 </Card>\r\n//               </Grid>\r\n//             ))}\r\n//           </Grid>\r\n//         </Box>\r\n//       </Box>\r\n//     </Box>\r\n//   );\r\n// };\r\n\r\n// export default Dashboard;\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,MAAM,EAAEC,GAAG,EAAEC,UAAU,EAAEC,IAAI,QAAQ,eAAe;AAC7D,OAAOC,GAAG,MAAM,oBAAoB;AACpC,OAAOC,QAAQ,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,SAAmB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAMhC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAS,EAAE,CAAC;EAE9C,MAAMa,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMT,GAAG,CAACU,GAAG,CAAC,QAAQ,CAAC;MACxCH,QAAQ,CAACE,QAAQ,CAACE,IAAI,CAAC;IACzB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C;EACF,CAAC;EAEDlB,SAAS,CAAC,MAAM;IACdc,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMM,YAAY,GAAIC,EAAU,IAAK;IACnCR,QAAQ,CAACD,KAAK,CAACU,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,GAAG,KAAKH,EAAE,CAAC,CAAC;EACjD,CAAC;EAED,oBACEZ,OAAA,CAACN,GAAG;IAACsB,CAAC,EAAE,CAAE;IAAAC,QAAA,gBACRjB,OAAA,CAACL,UAAU;MAACuB,OAAO,EAAC,IAAI;MAACC,YAAY;MAAAF,QAAA,EAAC;IAAU;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAY,CAAC,eAC7DvB,OAAA,CAACP,MAAM;MAACyB,OAAO,EAAC,WAAW;MAACM,KAAK,EAAC,SAAS;MAACC,IAAI,EAAC,cAAc;MAAAR,QAAA,EAAC;IAAW;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACpFvB,OAAA,CAACJ,IAAI;MAAC8B,SAAS;MAACC,OAAO,EAAE,CAAE;MAACC,EAAE,EAAE,CAAE;MAAAX,QAAA,EAC/Bd,KAAK,CAAC0B,GAAG,CAAEf,IAAS,iBACnBd,OAAA,CAACJ,IAAI;QAACkC,IAAI;QAACC,EAAE,EAAE,EAAG;QAACC,EAAE,EAAE,CAAE;QAACC,EAAE,EAAE,CAAE;QAAAhB,QAAA,eAC9BjB,OAAA,CAACF,QAAQ;UAACgB,IAAI,EAAEA,IAAK;UAACoB,QAAQ,EAAEvB;QAAa;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC,GADZT,IAAI,CAACC,GAAG;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAExC,CACP;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV,CAAC;AAACrB,EAAA,CAtCID,SAAmB;AAAAkC,EAAA,GAAnBlC,SAAmB;AAwCzB,eAAeA,SAAS;;AAKxkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}