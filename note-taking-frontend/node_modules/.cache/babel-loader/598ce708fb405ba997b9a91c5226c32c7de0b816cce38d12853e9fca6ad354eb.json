{"ast":null,"code":"// import React, { useState } from \"react\";\n// import {\n//   Container,\n//   Grid,\n//   Typography,\n//   Box,\n//   TextField,\n//   Button,\n//   InputAdornment,\n//   IconButton,\n// } from \"@mui/material\";\n// import { Visibility, VisibilityOff } from \"@mui/icons-material\";\n// import { Formik, Form, Field } from \"formik\";\n// import * as Yup from \"yup\";\n// import api from \"../../services/api\";\n\n// const Login: React.FC = () => {\n//   const [showPassword, setShowPassword] = useState(false);\n//   const [loginWithOtp, setLoginWithOtp] = useState(false);\n\n//   const initialValues = loginWithOtp\n//     ? { email: \"\", otp: \"\" }\n//     : { email: \"\", password: \"\" };\n\n//   const validationSchema = Yup.object(\n//     loginWithOtp\n//       ? {\n//           email: Yup.string().email(\"Invalid email\").required(\"Required\"),\n//           otp: Yup.string().required(\"OTP is required\"),\n//         }\n//       : {\n//           email: Yup.string().email(\"Invalid email\").required(\"Required\"),\n//           password: Yup.string().required(\"Password is required\"),\n//         }\n//   );\n\n//   const handleSubmit = async (values: typeof initialValues) => {\n//     try {\n//       if (loginWithOtp) {\n//         const response = await api.post(\"/auth/verify-otp\", {\n//           email: values.email,\n//           otp: values.otp,\n//         });\n//         alert(response.data.message);\n//       } else {\n//         const response = await api.post(\"/auth/login\", {\n//           email: values.email,\n//           password: values.password,\n//         });\n//         localStorage.setItem(\"token\", response.data.token);\n//         window.location.href = \"/notes\";\n//       }\n//     } catch (error: any) {\n//       alert(error.response?.data?.message || \"Login failed\");\n//     }\n//   };\n\n//   return (\n//     <Container\n//       maxWidth={false}\n//       sx={{\n//         height: \"100vh\",\n//         display: \"flex\",\n//         alignItems: \"center\",\n//         justifyContent: \"center\",\n//       }}\n//     >\n//       <Grid\n//         container\n//         spacing={2}\n//         sx={{\n//           height: \"100%\",\n//           boxShadow: 3,\n//           borderRadius: 3,\n//           overflow: \"hidden\",\n//         }}\n//       >\n//         {/* Left Side - Image */}\n//         <Grid\n//           item\n//           xs={12}\n//           md={6}\n//           sx={{\n//             backgroundImage: \"url('/assets/images/signup-bg.png')\",\n//             backgroundSize: \"cover\",\n//             backgroundPosition: \"center\",\n//           }}\n//         ></Grid>\n\n//         {/* Right Side - Login Form */}\n//         <Grid item xs={12} md={6} sx={{ padding: 4 }}>\n//           <Box sx={{ padding: 8 }}>\n//             <Typography variant=\"h4\" fontWeight=\"bold\" gutterBottom>\n//               Login\n//             </Typography>\n//             <Typography variant=\"body1\" color=\"text.secondary\" mb={4}>\n//               Login to continue to HD\n//             </Typography>\n\n//             <Formik\n//               initialValues={initialValues}\n//               validationSchema={validationSchema}\n//               onSubmit={handleSubmit}\n//             >\n//               {({ errors, touched }) => (\n//                 <Form>\n//                   <Field\n//                     name=\"email\"\n//                     as={TextField}\n//                     label=\"Email\"\n//                     fullWidth\n//                     margin=\"normal\"\n//                     variant=\"outlined\"\n//                     error={touched.email && !!errors.email}\n//                     helperText={touched.email && errors.email}\n//                   />\n\n//                   {loginWithOtp ? (\n//                     <Field\n//                       name=\"otp\"\n//                       as={TextField}\n//                       label=\"OTP\"\n//                       fullWidth\n//                       margin=\"normal\"\n//                       variant=\"outlined\"\n//                       error={touched.otp && !!errors.otp}\n//                       helperText={touched.otp && errors.otp}\n//                     />\n//                   ) : (\n//                     <Field\n//                       name=\"password\"\n//                       as={TextField}\n//                       label=\"Password\"\n//                       type={showPassword ? \"text\" : \"password\"}\n//                       fullWidth\n//                       margin=\"normal\"\n//                       variant=\"outlined\"\n//                       error={touched.password && !!errors.password}\n//                       helperText={touched.password && errors.password}\n//                       InputProps={{\n//                         endAdornment: (\n//                           <InputAdornment position=\"end\">\n//                             <IconButton\n//                               onClick={() => setShowPassword(!showPassword)}\n//                             >\n//                               {showPassword ? <VisibilityOff /> : <Visibility />}\n//                             </IconButton>\n//                           </InputAdornment>\n//                         ),\n//                       }}\n//                     />\n//                   )}\n\n//                   <Button\n//                     type=\"submit\"\n//                     variant=\"contained\"\n//                     fullWidth\n//                     sx={{ marginY: 2, paddingY: 1.5, backgroundColor: \"#367AFF\" }}\n//                   >\n//                     {loginWithOtp ? \"Login with OTP\" : \"Login\"}\n//                   </Button>\n\n//                   <Typography\n//                     variant=\"body2\"\n//                     align=\"center\"\n//                     sx={{ cursor: \"pointer\", color: \"#367AFF\" }}\n//                     onClick={() => setLoginWithOtp(!loginWithOtp)}\n//                   >\n//                     {loginWithOtp\n//                       ? \"Login with Password instead\"\n//                       : \"Login with OTP instead\"}\n//                   </Typography>\n//                 </Form>\n//               )}\n//             </Formik>\n//           </Box>\n//         </Grid>\n//       </Grid>\n//     </Container>\n//   );\n// };\n\n// export default Login;\n\n// import React, { useState } from \"react\";\n// import {\n//   Container,\n//   Grid,\n//   Typography,\n//   Box,\n//   TextField,\n//   InputAdornment,\n//   IconButton,\n//   Button,\n// } from \"@mui/material\";\n// import { Visibility, VisibilityOff } from \"@mui/icons-material\";\n// import { useFormik } from \"formik\";\n// import * as Yup from \"yup\";\n// import api from \"../../services/api\";\n\n// const Login: React.FC = () => {\n//   const [useOtp, setUseOtp] = useState(false); // Toggle between OTP and password login\n//   const [otpSent, setOtpSent] = useState(false); // Track OTP sent status\n//   const [showPassword, setShowPassword] = useState(false);\n\n//   const handleToggleLoginMethod = () => {\n//     setUseOtp(!useOtp);\n//     setOtpSent(false); // Reset OTP sent status when switching methods\n//   };\n\n//   const handleSendOtp = async (email: string) => {\n//     try {\n//       await api.post(\"/auth/send-otp\", { email });\n//       alert(\"OTP sent successfully to your email\");\n//       setOtpSent(true);\n//     } catch (error: any) {\n//       alert(error.response?.data?.message || \"Failed to send OTP\");\n//     }\n//   };\n\n//   const validationSchema = Yup.object({\n//     email: Yup.string().email(\"Invalid email\").required(\"Email is required\"),\n//     ...(useOtp\n//       ? { otp: Yup.string().required(\"OTP is required\") }\n//       : { password: Yup.string().required(\"Password is required\") }),\n//   });\n\n//   const formik = useFormik({\n//     initialValues: { email: \"\", password: \"\", otp: \"\" },\n//     validationSchema,\n//     onSubmit: async (values) => {\n//       try {\n//         if (useOtp) {\n//           // Login with OTP\n//           await api.post(\"/auth/verify-otp\", { email: values.email, otp: values.otp });\n//         } else {\n//           // Login with password\n//           const response = await api.post(\"/auth/login\", {\n//             email: values.email,\n//             password: values.password,\n//           });\n//           localStorage.setItem(\"token\", response.data.token);\n//         }\n//         window.location.href = \"/notes\";\n//       } catch (error: any) {\n//         alert(error.response?.data?.message || \"Login failed\");\n//       }\n//     },\n//   });\n\n//   return (\n//     <Container\n//       maxWidth={false}\n//       sx={{\n//         height: \"100vh\",\n//         display: \"flex\",\n//         alignItems: \"center\",\n//         justifyContent: \"center\",\n//       }}\n//     >\n//       <Grid\n//         container\n//         spacing={2}\n//         sx={{\n//           height: \"100%\",\n//           boxShadow: 3,\n//           borderRadius: 3,\n//           overflow: \"hidden\",\n//         }}\n//       >\n//         {/* Left Side - Image */}\n//         <Grid\n//           item\n//           xs={12}\n//           md={6}\n//           sx={{\n//             backgroundImage: \"url('/assets/images/signup-bg.png')\",\n//             backgroundSize: \"cover\",\n//             backgroundPosition: \"center\",\n//           }}\n//         ></Grid>\n\n//         {/* Right Side - Login Form */}\n//         <Grid item xs={12} md={6} sx={{ padding: 4 }}>\n//           <Typography variant=\"h4\" fontWeight=\"bold\" gutterBottom>\n//             Login\n//           </Typography>\n//           <Typography variant=\"body1\" color=\"text.secondary\" mb={4}>\n//             Login to access your account\n//           </Typography>\n//           <Box component=\"form\" noValidate onSubmit={formik.handleSubmit}>\n//             <TextField\n//               label=\"Email\"\n//               name=\"email\"\n//               fullWidth\n//               margin=\"normal\"\n//               variant=\"outlined\"\n//               value={formik.values.email}\n//               onChange={formik.handleChange}\n//               error={formik.touched.email && !!formik.errors.email}\n//               helperText={formik.touched.email && formik.errors.email}\n//             />\n//             {useOtp ? (\n//               <>\n//                 {otpSent ? (\n//                   <TextField\n//                     label=\"OTP\"\n//                     name=\"otp\"\n//                     fullWidth\n//                     margin=\"normal\"\n//                     variant=\"outlined\"\n//                     value={formik.values.otp}\n//                     onChange={formik.handleChange}\n//                     error={formik.touched.otp && !!formik.errors.otp}\n//                     helperText={formik.touched.otp && formik.errors.otp}\n//                   />\n//                 ) : (\n//                   <Button\n//                     variant=\"contained\"\n//                     fullWidth\n//                     sx={{ marginY: 2, paddingY: 1.5 }}\n//                     onClick={() => handleSendOtp(formik.values.email)}\n//                     disabled={!formik.values.email || !!formik.errors.email}\n//                   >\n//                     Send OTP\n//                   </Button>\n//                 )}\n//               </>\n//             ) : (\n//               <TextField\n//                 label=\"Password\"\n//                 name=\"password\"\n//                 fullWidth\n//                 margin=\"normal\"\n//                 variant=\"outlined\"\n//                 type={showPassword ? \"text\" : \"password\"}\n//                 value={formik.values.password}\n//                 onChange={formik.handleChange}\n//                 error={formik.touched.password && !!formik.errors.password}\n//                 helperText={formik.touched.password && formik.errors.password}\n//                 InputProps={{\n//                   endAdornment: (\n//                     <InputAdornment position=\"end\">\n//                       <IconButton onClick={() => setShowPassword(!showPassword)}>\n//                         {showPassword ? <VisibilityOff /> : <Visibility />}\n//                       </IconButton>\n//                     </InputAdornment>\n//                   ),\n//                 }}\n//               />\n//             )}\n//             <Button\n//               type=\"submit\"\n//               variant=\"contained\"\n//               fullWidth\n//               sx={{ marginY: 2, paddingY: 1.5 }}\n//             >\n//               {useOtp ? (otpSent ? \"Verify OTP\" : \"Send OTP\") : \"Login\"}\n//             </Button>\n//           </Box>\n//           <Typography\n//             align=\"center\"\n//             variant=\"body2\"\n//             sx={{ cursor: \"pointer\" }}\n//             onClick={handleToggleLoginMethod}\n//           >\n//             {useOtp ? \"Login with Password\" : \"Login with OTP\"}\n//           </Typography>\n//         </Grid>\n//       </Grid>\n//     </Container>\n//   );\n// };\n\n// export default Login;","map":{"version":3,"names":[],"sources":["D:/Study/Code/Self-Projects/NoteApp/note-taking-frontend/src/components/Auth/Login.tsx"],"sourcesContent":["// import React, { useState } from \"react\";\r\n// import {\r\n//   Container,\r\n//   Grid,\r\n//   Typography,\r\n//   Box,\r\n//   TextField,\r\n//   Button,\r\n//   InputAdornment,\r\n//   IconButton,\r\n// } from \"@mui/material\";\r\n// import { Visibility, VisibilityOff } from \"@mui/icons-material\";\r\n// import { Formik, Form, Field } from \"formik\";\r\n// import * as Yup from \"yup\";\r\n// import api from \"../../services/api\";\r\n\r\n// const Login: React.FC = () => {\r\n//   const [showPassword, setShowPassword] = useState(false);\r\n//   const [loginWithOtp, setLoginWithOtp] = useState(false);\r\n\r\n//   const initialValues = loginWithOtp\r\n//     ? { email: \"\", otp: \"\" }\r\n//     : { email: \"\", password: \"\" };\r\n\r\n//   const validationSchema = Yup.object(\r\n//     loginWithOtp\r\n//       ? {\r\n//           email: Yup.string().email(\"Invalid email\").required(\"Required\"),\r\n//           otp: Yup.string().required(\"OTP is required\"),\r\n//         }\r\n//       : {\r\n//           email: Yup.string().email(\"Invalid email\").required(\"Required\"),\r\n//           password: Yup.string().required(\"Password is required\"),\r\n//         }\r\n//   );\r\n\r\n//   const handleSubmit = async (values: typeof initialValues) => {\r\n//     try {\r\n//       if (loginWithOtp) {\r\n//         const response = await api.post(\"/auth/verify-otp\", {\r\n//           email: values.email,\r\n//           otp: values.otp,\r\n//         });\r\n//         alert(response.data.message);\r\n//       } else {\r\n//         const response = await api.post(\"/auth/login\", {\r\n//           email: values.email,\r\n//           password: values.password,\r\n//         });\r\n//         localStorage.setItem(\"token\", response.data.token);\r\n//         window.location.href = \"/notes\";\r\n//       }\r\n//     } catch (error: any) {\r\n//       alert(error.response?.data?.message || \"Login failed\");\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <Container\r\n//       maxWidth={false}\r\n//       sx={{\r\n//         height: \"100vh\",\r\n//         display: \"flex\",\r\n//         alignItems: \"center\",\r\n//         justifyContent: \"center\",\r\n//       }}\r\n//     >\r\n//       <Grid\r\n//         container\r\n//         spacing={2}\r\n//         sx={{\r\n//           height: \"100%\",\r\n//           boxShadow: 3,\r\n//           borderRadius: 3,\r\n//           overflow: \"hidden\",\r\n//         }}\r\n//       >\r\n//         {/* Left Side - Image */}\r\n//         <Grid\r\n//           item\r\n//           xs={12}\r\n//           md={6}\r\n//           sx={{\r\n//             backgroundImage: \"url('/assets/images/signup-bg.png')\",\r\n//             backgroundSize: \"cover\",\r\n//             backgroundPosition: \"center\",\r\n//           }}\r\n//         ></Grid>\r\n\r\n//         {/* Right Side - Login Form */}\r\n//         <Grid item xs={12} md={6} sx={{ padding: 4 }}>\r\n//           <Box sx={{ padding: 8 }}>\r\n//             <Typography variant=\"h4\" fontWeight=\"bold\" gutterBottom>\r\n//               Login\r\n//             </Typography>\r\n//             <Typography variant=\"body1\" color=\"text.secondary\" mb={4}>\r\n//               Login to continue to HD\r\n//             </Typography>\r\n\r\n//             <Formik\r\n//               initialValues={initialValues}\r\n//               validationSchema={validationSchema}\r\n//               onSubmit={handleSubmit}\r\n//             >\r\n//               {({ errors, touched }) => (\r\n//                 <Form>\r\n//                   <Field\r\n//                     name=\"email\"\r\n//                     as={TextField}\r\n//                     label=\"Email\"\r\n//                     fullWidth\r\n//                     margin=\"normal\"\r\n//                     variant=\"outlined\"\r\n//                     error={touched.email && !!errors.email}\r\n//                     helperText={touched.email && errors.email}\r\n//                   />\r\n\r\n//                   {loginWithOtp ? (\r\n//                     <Field\r\n//                       name=\"otp\"\r\n//                       as={TextField}\r\n//                       label=\"OTP\"\r\n//                       fullWidth\r\n//                       margin=\"normal\"\r\n//                       variant=\"outlined\"\r\n//                       error={touched.otp && !!errors.otp}\r\n//                       helperText={touched.otp && errors.otp}\r\n//                     />\r\n//                   ) : (\r\n//                     <Field\r\n//                       name=\"password\"\r\n//                       as={TextField}\r\n//                       label=\"Password\"\r\n//                       type={showPassword ? \"text\" : \"password\"}\r\n//                       fullWidth\r\n//                       margin=\"normal\"\r\n//                       variant=\"outlined\"\r\n//                       error={touched.password && !!errors.password}\r\n//                       helperText={touched.password && errors.password}\r\n//                       InputProps={{\r\n//                         endAdornment: (\r\n//                           <InputAdornment position=\"end\">\r\n//                             <IconButton\r\n//                               onClick={() => setShowPassword(!showPassword)}\r\n//                             >\r\n//                               {showPassword ? <VisibilityOff /> : <Visibility />}\r\n//                             </IconButton>\r\n//                           </InputAdornment>\r\n//                         ),\r\n//                       }}\r\n//                     />\r\n//                   )}\r\n\r\n//                   <Button\r\n//                     type=\"submit\"\r\n//                     variant=\"contained\"\r\n//                     fullWidth\r\n//                     sx={{ marginY: 2, paddingY: 1.5, backgroundColor: \"#367AFF\" }}\r\n//                   >\r\n//                     {loginWithOtp ? \"Login with OTP\" : \"Login\"}\r\n//                   </Button>\r\n\r\n//                   <Typography\r\n//                     variant=\"body2\"\r\n//                     align=\"center\"\r\n//                     sx={{ cursor: \"pointer\", color: \"#367AFF\" }}\r\n//                     onClick={() => setLoginWithOtp(!loginWithOtp)}\r\n//                   >\r\n//                     {loginWithOtp\r\n//                       ? \"Login with Password instead\"\r\n//                       : \"Login with OTP instead\"}\r\n//                   </Typography>\r\n//                 </Form>\r\n//               )}\r\n//             </Formik>\r\n//           </Box>\r\n//         </Grid>\r\n//       </Grid>\r\n//     </Container>\r\n//   );\r\n// };\r\n\r\n// export default Login;\r\n\r\n\r\n\r\n// import React, { useState } from \"react\";\r\n// import {\r\n//   Container,\r\n//   Grid,\r\n//   Typography,\r\n//   Box,\r\n//   TextField,\r\n//   InputAdornment,\r\n//   IconButton,\r\n//   Button,\r\n// } from \"@mui/material\";\r\n// import { Visibility, VisibilityOff } from \"@mui/icons-material\";\r\n// import { useFormik } from \"formik\";\r\n// import * as Yup from \"yup\";\r\n// import api from \"../../services/api\";\r\n\r\n// const Login: React.FC = () => {\r\n//   const [useOtp, setUseOtp] = useState(false); // Toggle between OTP and password login\r\n//   const [otpSent, setOtpSent] = useState(false); // Track OTP sent status\r\n//   const [showPassword, setShowPassword] = useState(false);\r\n\r\n//   const handleToggleLoginMethod = () => {\r\n//     setUseOtp(!useOtp);\r\n//     setOtpSent(false); // Reset OTP sent status when switching methods\r\n//   };\r\n\r\n//   const handleSendOtp = async (email: string) => {\r\n//     try {\r\n//       await api.post(\"/auth/send-otp\", { email });\r\n//       alert(\"OTP sent successfully to your email\");\r\n//       setOtpSent(true);\r\n//     } catch (error: any) {\r\n//       alert(error.response?.data?.message || \"Failed to send OTP\");\r\n//     }\r\n//   };\r\n\r\n//   const validationSchema = Yup.object({\r\n//     email: Yup.string().email(\"Invalid email\").required(\"Email is required\"),\r\n//     ...(useOtp\r\n//       ? { otp: Yup.string().required(\"OTP is required\") }\r\n//       : { password: Yup.string().required(\"Password is required\") }),\r\n//   });\r\n\r\n//   const formik = useFormik({\r\n//     initialValues: { email: \"\", password: \"\", otp: \"\" },\r\n//     validationSchema,\r\n//     onSubmit: async (values) => {\r\n//       try {\r\n//         if (useOtp) {\r\n//           // Login with OTP\r\n//           await api.post(\"/auth/verify-otp\", { email: values.email, otp: values.otp });\r\n//         } else {\r\n//           // Login with password\r\n//           const response = await api.post(\"/auth/login\", {\r\n//             email: values.email,\r\n//             password: values.password,\r\n//           });\r\n//           localStorage.setItem(\"token\", response.data.token);\r\n//         }\r\n//         window.location.href = \"/notes\";\r\n//       } catch (error: any) {\r\n//         alert(error.response?.data?.message || \"Login failed\");\r\n//       }\r\n//     },\r\n//   });\r\n\r\n//   return (\r\n//     <Container\r\n//       maxWidth={false}\r\n//       sx={{\r\n//         height: \"100vh\",\r\n//         display: \"flex\",\r\n//         alignItems: \"center\",\r\n//         justifyContent: \"center\",\r\n//       }}\r\n//     >\r\n//       <Grid\r\n//         container\r\n//         spacing={2}\r\n//         sx={{\r\n//           height: \"100%\",\r\n//           boxShadow: 3,\r\n//           borderRadius: 3,\r\n//           overflow: \"hidden\",\r\n//         }}\r\n//       >\r\n//         {/* Left Side - Image */}\r\n//         <Grid\r\n//           item\r\n//           xs={12}\r\n//           md={6}\r\n//           sx={{\r\n//             backgroundImage: \"url('/assets/images/signup-bg.png')\",\r\n//             backgroundSize: \"cover\",\r\n//             backgroundPosition: \"center\",\r\n//           }}\r\n//         ></Grid>\r\n\r\n//         {/* Right Side - Login Form */}\r\n//         <Grid item xs={12} md={6} sx={{ padding: 4 }}>\r\n//           <Typography variant=\"h4\" fontWeight=\"bold\" gutterBottom>\r\n//             Login\r\n//           </Typography>\r\n//           <Typography variant=\"body1\" color=\"text.secondary\" mb={4}>\r\n//             Login to access your account\r\n//           </Typography>\r\n//           <Box component=\"form\" noValidate onSubmit={formik.handleSubmit}>\r\n//             <TextField\r\n//               label=\"Email\"\r\n//               name=\"email\"\r\n//               fullWidth\r\n//               margin=\"normal\"\r\n//               variant=\"outlined\"\r\n//               value={formik.values.email}\r\n//               onChange={formik.handleChange}\r\n//               error={formik.touched.email && !!formik.errors.email}\r\n//               helperText={formik.touched.email && formik.errors.email}\r\n//             />\r\n//             {useOtp ? (\r\n//               <>\r\n//                 {otpSent ? (\r\n//                   <TextField\r\n//                     label=\"OTP\"\r\n//                     name=\"otp\"\r\n//                     fullWidth\r\n//                     margin=\"normal\"\r\n//                     variant=\"outlined\"\r\n//                     value={formik.values.otp}\r\n//                     onChange={formik.handleChange}\r\n//                     error={formik.touched.otp && !!formik.errors.otp}\r\n//                     helperText={formik.touched.otp && formik.errors.otp}\r\n//                   />\r\n//                 ) : (\r\n//                   <Button\r\n//                     variant=\"contained\"\r\n//                     fullWidth\r\n//                     sx={{ marginY: 2, paddingY: 1.5 }}\r\n//                     onClick={() => handleSendOtp(formik.values.email)}\r\n//                     disabled={!formik.values.email || !!formik.errors.email}\r\n//                   >\r\n//                     Send OTP\r\n//                   </Button>\r\n//                 )}\r\n//               </>\r\n//             ) : (\r\n//               <TextField\r\n//                 label=\"Password\"\r\n//                 name=\"password\"\r\n//                 fullWidth\r\n//                 margin=\"normal\"\r\n//                 variant=\"outlined\"\r\n//                 type={showPassword ? \"text\" : \"password\"}\r\n//                 value={formik.values.password}\r\n//                 onChange={formik.handleChange}\r\n//                 error={formik.touched.password && !!formik.errors.password}\r\n//                 helperText={formik.touched.password && formik.errors.password}\r\n//                 InputProps={{\r\n//                   endAdornment: (\r\n//                     <InputAdornment position=\"end\">\r\n//                       <IconButton onClick={() => setShowPassword(!showPassword)}>\r\n//                         {showPassword ? <VisibilityOff /> : <Visibility />}\r\n//                       </IconButton>\r\n//                     </InputAdornment>\r\n//                   ),\r\n//                 }}\r\n//               />\r\n//             )}\r\n//             <Button\r\n//               type=\"submit\"\r\n//               variant=\"contained\"\r\n//               fullWidth\r\n//               sx={{ marginY: 2, paddingY: 1.5 }}\r\n//             >\r\n//               {useOtp ? (otpSent ? \"Verify OTP\" : \"Send OTP\") : \"Login\"}\r\n//             </Button>\r\n//           </Box>\r\n//           <Typography\r\n//             align=\"center\"\r\n//             variant=\"body2\"\r\n//             sx={{ cursor: \"pointer\" }}\r\n//             onClick={handleToggleLoginMethod}\r\n//           >\r\n//             {useOtp ? \"Login with Password\" : \"Login with OTP\"}\r\n//           </Typography>\r\n//         </Grid>\r\n//       </Grid>\r\n//     </Container>\r\n//   );\r\n// };\r\n\r\n// export default Login;\r\n\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}