{"ast":null,"code":"var _jsxFileName = \"D:\\\\Study\\\\Code\\\\Self-Projects\\\\NoteApp\\\\note-taking-frontend\\\\src\\\\components\\\\Auth\\\\Login.tsx\";\nimport React from \"react\";\nimport { Formik, Form, Field } from \"formik\";\nimport * as Yup from \"yup\";\nimport { Button, TextField, Box, Typography } from \"@mui/material\";\nimport api from \"../../services/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = () => {\n  const initialValues = {\n    email: \"\",\n    password: \"\"\n  };\n  const validationSchema = Yup.object({\n    email: Yup.string().email(\"Invalid email\").required(\"Required\"),\n    password: Yup.string().required(\"Required\")\n  });\n  const handleSubmit = async values => {\n    try {\n      const response = await api.post(\"/auth/login\", values);\n      localStorage.setItem(\"token\", response.data.token);\n      window.location.href = \"/notes\";\n    } catch (error) {\n      console.error(\"Login failed:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    maxWidth: 400,\n    mx: \"auto\",\n    mt: 5,\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: initialValues,\n      validationSchema: validationSchema,\n      onSubmit: handleSubmit,\n      children: ({\n        errors,\n        touched\n      }) => /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(Field, {\n          name: \"email\",\n          as: TextField,\n          label: \"Email\",\n          fullWidth: true,\n          margin: \"normal\",\n          error: touched.email && !!errors.email,\n          helperText: touched.email && errors.email\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          name: \"password\",\n          as: TextField,\n          label: \"Password\",\n          type: \"password\",\n          fullWidth: true,\n          margin: \"normal\",\n          error: touched.password && !!errors.password,\n          helperText: touched.password && errors.password\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          variant: \"contained\",\n          color: \"primary\",\n          fullWidth: true,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","Formik","Form","Field","Yup","Button","TextField","Box","Typography","api","jsxDEV","_jsxDEV","Login","initialValues","email","password","validationSchema","object","string","required","handleSubmit","values","response","post","localStorage","setItem","data","token","window","location","href","error","console","maxWidth","mx","mt","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","errors","touched","name","as","label","fullWidth","margin","helperText","type","color","_c","$RefreshReg$"],"sources":["D:/Study/Code/Self-Projects/NoteApp/note-taking-frontend/src/components/Auth/Login.tsx"],"sourcesContent":["import React from \"react\";\r\nimport { Formik, Form, Field } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { Button, TextField, Box, Typography } from \"@mui/material\";\r\nimport api from \"../../services/api\";\r\n\r\nconst Login: React.FC = () => {\r\n  const initialValues = { email: \"\", password: \"\" };\r\n\r\n  const validationSchema = Yup.object({\r\n    email: Yup.string().email(\"Invalid email\").required(\"Required\"),\r\n    password: Yup.string().required(\"Required\"),\r\n  });\r\n\r\n  const handleSubmit = async (values: typeof initialValues) => {\r\n    try {\r\n      const response = await api.post(\"/auth/login\", values);\r\n      localStorage.setItem(\"token\", response.data.token);\r\n      window.location.href = \"/notes\";\r\n    } catch (error) {\r\n      console.error(\"Login failed:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box maxWidth={400} mx=\"auto\" mt={5}>\r\n      <Typography variant=\"h4\" gutterBottom>Login</Typography>\r\n      <Formik initialValues={initialValues} validationSchema={validationSchema} onSubmit={handleSubmit}>\r\n        {({ errors, touched }) => (\r\n          <Form>\r\n            <Field name=\"email\" as={TextField} label=\"Email\" fullWidth margin=\"normal\" error={touched.email && !!errors.email} helperText={touched.email && errors.email} />\r\n            <Field name=\"password\" as={TextField} label=\"Password\" type=\"password\" fullWidth margin=\"normal\" error={touched.password && !!errors.password} helperText={touched.password && errors.password} />\r\n            <Button type=\"submit\" variant=\"contained\" color=\"primary\" fullWidth>Login</Button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}