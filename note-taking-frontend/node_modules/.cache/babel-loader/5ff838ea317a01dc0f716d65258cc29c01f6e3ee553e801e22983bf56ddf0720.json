{"ast":null,"code":"var _jsxFileName = \"D:\\\\Study\\\\Code\\\\Self-Projects\\\\NoteApp\\\\note-taking-frontend\\\\src\\\\components\\\\Auth\\\\Login.tsx\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import {\n//   Container,\n//   Grid,\n//   Typography,\n//   Box,\n//   TextField,\n//   Button,\n//   InputAdornment,\n//   IconButton,\n// } from \"@mui/material\";\n// import { Visibility, VisibilityOff } from \"@mui/icons-material\";\n// import { Formik, Form, Field } from \"formik\";\n// import * as Yup from \"yup\";\n// import api from \"../../services/api\";\n\n// const Login: React.FC = () => {\n//   const [showPassword, setShowPassword] = useState(false);\n//   const [loginWithOtp, setLoginWithOtp] = useState(false);\n\n//   const initialValues = loginWithOtp\n//     ? { email: \"\", otp: \"\" }\n//     : { email: \"\", password: \"\" };\n\n//   const validationSchema = Yup.object(\n//     loginWithOtp\n//       ? {\n//           email: Yup.string().email(\"Invalid email\").required(\"Required\"),\n//           otp: Yup.string().required(\"OTP is required\"),\n//         }\n//       : {\n//           email: Yup.string().email(\"Invalid email\").required(\"Required\"),\n//           password: Yup.string().required(\"Password is required\"),\n//         }\n//   );\n\n//   const handleSubmit = async (values: typeof initialValues) => {\n//     try {\n//       if (loginWithOtp) {\n//         const response = await api.post(\"/auth/verify-otp\", {\n//           email: values.email,\n//           otp: values.otp,\n//         });\n//         alert(response.data.message);\n//       } else {\n//         const response = await api.post(\"/auth/login\", {\n//           email: values.email,\n//           password: values.password,\n//         });\n//         localStorage.setItem(\"token\", response.data.token);\n//         window.location.href = \"/notes\";\n//       }\n//     } catch (error: any) {\n//       alert(error.response?.data?.message || \"Login failed\");\n//     }\n//   };\n\n//   return (\n//     <Container\n//       maxWidth={false}\n//       sx={{\n//         height: \"100vh\",\n//         display: \"flex\",\n//         alignItems: \"center\",\n//         justifyContent: \"center\",\n//       }}\n//     >\n//       <Grid\n//         container\n//         spacing={2}\n//         sx={{\n//           height: \"100%\",\n//           boxShadow: 3,\n//           borderRadius: 3,\n//           overflow: \"hidden\",\n//         }}\n//       >\n//         {/* Left Side - Image */}\n//         <Grid\n//           item\n//           xs={12}\n//           md={6}\n//           sx={{\n//             backgroundImage: \"url('/assets/images/signup-bg.png')\",\n//             backgroundSize: \"cover\",\n//             backgroundPosition: \"center\",\n//           }}\n//         ></Grid>\n\n//         {/* Right Side - Login Form */}\n//         <Grid item xs={12} md={6} sx={{ padding: 4 }}>\n//           <Box sx={{ padding: 8 }}>\n//             <Typography variant=\"h4\" fontWeight=\"bold\" gutterBottom>\n//               Login\n//             </Typography>\n//             <Typography variant=\"body1\" color=\"text.secondary\" mb={4}>\n//               Login to continue to HD\n//             </Typography>\n\n//             <Formik\n//               initialValues={initialValues}\n//               validationSchema={validationSchema}\n//               onSubmit={handleSubmit}\n//             >\n//               {({ errors, touched }) => (\n//                 <Form>\n//                   <Field\n//                     name=\"email\"\n//                     as={TextField}\n//                     label=\"Email\"\n//                     fullWidth\n//                     margin=\"normal\"\n//                     variant=\"outlined\"\n//                     error={touched.email && !!errors.email}\n//                     helperText={touched.email && errors.email}\n//                   />\n\n//                   {loginWithOtp ? (\n//                     <Field\n//                       name=\"otp\"\n//                       as={TextField}\n//                       label=\"OTP\"\n//                       fullWidth\n//                       margin=\"normal\"\n//                       variant=\"outlined\"\n//                       error={touched.otp && !!errors.otp}\n//                       helperText={touched.otp && errors.otp}\n//                     />\n//                   ) : (\n//                     <Field\n//                       name=\"password\"\n//                       as={TextField}\n//                       label=\"Password\"\n//                       type={showPassword ? \"text\" : \"password\"}\n//                       fullWidth\n//                       margin=\"normal\"\n//                       variant=\"outlined\"\n//                       error={touched.password && !!errors.password}\n//                       helperText={touched.password && errors.password}\n//                       InputProps={{\n//                         endAdornment: (\n//                           <InputAdornment position=\"end\">\n//                             <IconButton\n//                               onClick={() => setShowPassword(!showPassword)}\n//                             >\n//                               {showPassword ? <VisibilityOff /> : <Visibility />}\n//                             </IconButton>\n//                           </InputAdornment>\n//                         ),\n//                       }}\n//                     />\n//                   )}\n\n//                   <Button\n//                     type=\"submit\"\n//                     variant=\"contained\"\n//                     fullWidth\n//                     sx={{ marginY: 2, paddingY: 1.5, backgroundColor: \"#367AFF\" }}\n//                   >\n//                     {loginWithOtp ? \"Login with OTP\" : \"Login\"}\n//                   </Button>\n\n//                   <Typography\n//                     variant=\"body2\"\n//                     align=\"center\"\n//                     sx={{ cursor: \"pointer\", color: \"#367AFF\" }}\n//                     onClick={() => setLoginWithOtp(!loginWithOtp)}\n//                   >\n//                     {loginWithOtp\n//                       ? \"Login with Password instead\"\n//                       : \"Login with OTP instead\"}\n//                   </Typography>\n//                 </Form>\n//               )}\n//             </Formik>\n//           </Box>\n//         </Grid>\n//       </Grid>\n//     </Container>\n//   );\n// };\n\n// export default Login;\n\n// import React, { useState } from \"react\";\n// import {\n//   Container,\n//   Grid,\n//   Typography,\n//   Box,\n//   TextField,\n//   InputAdornment,\n//   IconButton,\n//   Button,\n// } from \"@mui/material\";\n// import { Visibility, VisibilityOff } from \"@mui/icons-material\";\n// import { useFormik } from \"formik\";\n// import * as Yup from \"yup\";\n// import api from \"../../services/api\";\n\n// const Login: React.FC = () => {\n//   const [useOtp, setUseOtp] = useState(false); // Toggle between OTP and password login\n//   const [otpSent, setOtpSent] = useState(false); // Track OTP sent status\n//   const [showPassword, setShowPassword] = useState(false);\n\n//   const handleToggleLoginMethod = () => {\n//     setUseOtp(!useOtp);\n//     setOtpSent(false); // Reset OTP sent status when switching methods\n//   };\n\n//   const handleSendOtp = async (email: string) => {\n//     try {\n//       await api.post(\"/auth/send-otp\", { email });\n//       alert(\"OTP sent successfully to your email\");\n//       setOtpSent(true);\n//     } catch (error: any) {\n//       alert(error.response?.data?.message || \"Failed to send OTP\");\n//     }\n//   };\n\n//   const validationSchema = Yup.object({\n//     email: Yup.string().email(\"Invalid email\").required(\"Email is required\"),\n//     ...(useOtp\n//       ? { otp: Yup.string().required(\"OTP is required\") }\n//       : { password: Yup.string().required(\"Password is required\") }),\n//   });\n\n//   const formik = useFormik({\n//     initialValues: { email: \"\", password: \"\", otp: \"\" },\n//     validationSchema,\n//     onSubmit: async (values) => {\n//       try {\n//         if (useOtp) {\n//           // Login with OTP\n//           const response = await api.post(\"/auth/verify-otp\", {\n//             email: values.email,\n//             otp: values.otp,\n//           });\n//           localStorage.setItem(\"token\", response.data.token); // Save the token\n//         } else {\n//           // Login with password\n//           const response = await api.post(\"/auth/login\", {\n//             email: values.email,\n//             password: values.password,\n//           });\n//           localStorage.setItem(\"token\", response.data.token); // Save the token\n//         }\n//         window.location.href = \"/notes\"; // Redirect to notes page\n//       } catch (error: any) {\n//         alert(error.response?.data?.message || \"Login failed\");\n//       }\n//     },\n\n//   });\n\n//   return (\n//     <Container\n//       maxWidth={false}\n//       sx={{\n//         height: \"100vh\",\n//         display: \"flex\",\n//         alignItems: \"center\",\n//         justifyContent: \"center\",\n//       }}\n//     >\n//       <Grid\n//         container\n//         spacing={2}\n//         sx={{\n//           height: \"100%\",\n//           boxShadow: 3,\n//           borderRadius: 3,\n//           overflow: \"hidden\",\n//         }}\n//       >\n//         {/* Left Side - Image */}\n//         <Grid\n//           item\n//           xs={12}\n//           md={7}\n//           sx={{\n//             backgroundImage: \"url('/assets/images/signup-bg.png')\",\n//             backgroundSize: \"cover\",\n//             backgroundPosition: \"center\",\n//           }}\n//         ></Grid>\n\n//         {/* Right Side - Login Form */}\n//         <Grid item xs={12} md={5} sx={{ padding: 4 }}>\n//           <Box sx={{ display: \"flex\", alignItems: \"center\", marginBottom: 3 }}>\n//                       <img\n//                         src=\"/assets/images/hd-icon.png\"\n//                         alt=\"HD Icon\"\n//                         style={{ width: 32, height: 32, marginRight: 8 }}\n//                       />\n//                       <Typography\n//                         variant=\"h6\"\n//                         fontWeight=\"bold\"\n//                         sx={{\n//                           color: \"#232323\",\n//                           fontFeatureSettings: \"'liga' off, 'clig' off\",\n//                           fontFamily: \"Inter\",\n//                           fontSize: \"24px\",\n//                           fontStyle: \"normal\",\n//                           fontWeight: 600,\n//                           lineHeight: \"110%\",\n//                           letterSpacing: \"-0.96px\",\n//                         }}\n//                       >\n//                         HD\n//                       </Typography>\n//                     </Box>\n//           <Box component=\"form\" noValidate onSubmit={formik.handleSubmit} sx={{ paddingLeft: 9, paddingRight: 9 }}>\n//           <Typography variant=\"h4\" fontWeight=\"bold\" gutterBottom>\n//             Login\n//           </Typography>\n//           <Typography variant=\"body1\" color=\"text.secondary\" mb={4}>\n//             Login to access your account\n//           </Typography>\n//             <TextField\n//               label=\"Email\"\n//               name=\"email\"\n//               fullWidth\n//               margin=\"normal\"\n//               variant=\"outlined\"\n//               value={formik.values.email}\n//               onChange={formik.handleChange}\n//               error={formik.touched.email && !!formik.errors.email}\n//               helperText={formik.touched.email && formik.errors.email}\n//             />\n//             {useOtp ? (\n//               otpSent ? (\n//                 <TextField\n//                   label=\"OTP\"\n//                   name=\"otp\"\n//                   fullWidth\n//                   margin=\"normal\"\n//                   variant=\"outlined\"\n//                   value={formik.values.otp}\n//                   onChange={formik.handleChange}\n//                   error={formik.touched.otp && !!formik.errors.otp}\n//                   helperText={formik.touched.otp && formik.errors.otp}\n//                 />\n//               ) : (\n//                 <Button\n//                   variant=\"contained\"\n//                   fullWidth\n//                   sx={{ marginY: 2, paddingY: 1.5 }}\n//                   onClick={() => handleSendOtp(formik.values.email)}\n//                   disabled={!formik.values.email || !!formik.errors.email}\n//                 >\n//                   Send OTP\n//                 </Button>\n//               )\n//             ) : (\n//               <TextField\n//                 label=\"Password\"\n//                 name=\"password\"\n//                 fullWidth\n//                 margin=\"normal\"\n//                 variant=\"outlined\"\n//                 type={showPassword ? \"text\" : \"password\"}\n//                 value={formik.values.password}\n//                 onChange={formik.handleChange}\n//                 error={formik.touched.password && !!formik.errors.password}\n//                 helperText={formik.touched.password && formik.errors.password}\n//                 InputProps={{\n//                   endAdornment: (\n//                     <InputAdornment position=\"end\">\n//                       <IconButton onClick={() => setShowPassword(!showPassword)}>\n//                         {showPassword ? <VisibilityOff /> : <Visibility />}\n//                       </IconButton>\n//                     </InputAdornment>\n//                   ),\n//                 }}\n//               />\n//             )}\n//             {otpSent || !useOtp ? (\n//               <Button\n//                 type=\"submit\"\n//                 variant=\"contained\"\n//                 fullWidth\n//                 sx={{ marginY: 2, paddingY: 1.5, backgroundColor: \"#367AFF\" , borderRadius: \"10px\"}}\n//               >\n//                 {useOtp ? \"Verify OTP\" : \"Login\"}\n//               </Button>\n//             ) : null}\n//           </Box>\n//           <Typography\n//             align=\"center\"\n//             variant=\"body2\"\n//             sx={{ cursor: \"pointer\" }}\n//             onClick={handleToggleLoginMethod}\n//           >\n//             {useOtp ? \"Login with Password\" : \"Login with OTP\"}\n//           </Typography>\n//         </Grid>\n//       </Grid>\n//     </Container>\n//   );\n// };\n\n// export default Login;\n\nimport React, { useState } from \"react\";\nimport { Container, Grid, Typography, Box, TextField, Button, useMediaQuery } from \"@mui/material\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport api from \"../../services/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = () => {\n  _s();\n  const [useOtp, setUseOtp] = useState(false);\n  const [otpSent, setOtpSent] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  const isMobile = useMediaQuery(\"(max-width:600px)\"); // For detecting mobile view\n\n  const handleToggleLoginMethod = () => {\n    setUseOtp(!useOtp);\n    setOtpSent(false);\n  };\n  const handleSendOtp = async email => {\n    try {\n      await api.post(\"/auth/send-otp\", {\n        email\n      });\n      alert(\"OTP sent successfully to your email\");\n      setOtpSent(true);\n    } catch (error) {\n      var _error$response, _error$response$data;\n      alert(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || \"Failed to send OTP\");\n    }\n  };\n  const validationSchema = Yup.object({\n    email: Yup.string().email(\"Invalid email\").required(\"Email is required\"),\n    ...(useOtp ? {\n      otp: Yup.string().required(\"OTP is required\")\n    } : {\n      password: Yup.string().required(\"Password is required\")\n    })\n  });\n  const formik = useFormik({\n    initialValues: {\n      email: \"\",\n      password: \"\",\n      otp: \"\"\n    },\n    validationSchema,\n    onSubmit: async values => {\n      try {\n        if (useOtp) {\n          const response = await api.post(\"/auth/verify-otp\", {\n            email: values.email,\n            otp: values.otp\n          });\n          localStorage.setItem(\"token\", response.data.token);\n        } else {\n          const response = await api.post(\"/auth/login\", {\n            email: values.email,\n            password: values.password\n          });\n          localStorage.setItem(\"token\", response.data.token);\n        }\n        window.location.href = \"/notes\";\n      } catch (error) {\n        var _error$response2, _error$response2$data;\n        alert(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || \"Login failed\");\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: false,\n    sx: {\n      height: \"100vh\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      padding: isMobile ? 2 : 0 // Add padding for mobile\n    },\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      sx: {\n        height: isMobile ? \"auto\" : \"100%\",\n        boxShadow: isMobile ? \"none\" : 3,\n        borderRadius: isMobile ? 0 : 3,\n        overflow: \"hidden\"\n      },\n      children: [!isMobile && /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 7,\n        sx: {\n          backgroundImage: \"url('/assets/images/signup-bg.png')\",\n          backgroundSize: \"cover\",\n          backgroundPosition: \"center\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 5,\n        sx: {\n          padding: isMobile ? 3 : 4,\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: isMobile ? \"center\" : \"flex-start\",\n          justifyContent: \"center\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: \"flex\",\n            alignItems: \"center\",\n            marginBottom: 3\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"/assets/images/hd-icon.png\",\n            alt: \"HD Icon\",\n            style: {\n              width: 32,\n              height: 32,\n              marginRight: 8,\n              display: isMobile ? \"none\" : \"block\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 550,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            fontWeight: \"bold\",\n            sx: {\n              color: \"#232323\",\n              fontFeatureSettings: \"'liga' off, 'clig' off\",\n              fontFamily: \"Inter\",\n              fontSize: isMobile ? \"20px\" : \"24px\",\n              fontWeight: 600,\n              letterSpacing: \"-0.96px\"\n            },\n            children: \"HD\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 560,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 549,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          component: \"form\",\n          noValidate: true,\n          onSubmit: formik.handleSubmit,\n          sx: {\n            width: isMobile ? \"100%\" : \"auto\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            fontWeight: \"bold\",\n            gutterBottom: true,\n            align: isMobile ? \"center\" : \"left\",\n            children: \"Sign up\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 583,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            color: \"text.secondary\",\n            mb: 4,\n            align: isMobile ? \"center\" : \"left\",\n            children: \"Sign up to enjoy the feature of HD\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 591,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            label: \"Your Name\",\n            name: \"name\",\n            fullWidth: true,\n            margin: \"normal\",\n            variant: \"outlined\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 599,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            label: \"Date of Birth\",\n            name: \"dob\",\n            fullWidth: true,\n            margin: \"normal\",\n            variant: \"outlined\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 606,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            label: \"Email\",\n            name: \"email\",\n            fullWidth: true,\n            margin: \"normal\",\n            variant: \"outlined\",\n            value: formik.values.email,\n            onChange: formik.handleChange,\n            error: formik.touched.email && !!formik.errors.email,\n            helperText: formik.touched.email && formik.errors.email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 613,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            label: \"OTP\",\n            name: \"otp\",\n            fullWidth: true,\n            margin: \"normal\",\n            variant: \"outlined\",\n            value: formik.values.otp,\n            onChange: formik.handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 624,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            variant: \"contained\",\n            fullWidth: true,\n            sx: {\n              marginY: 2,\n              paddingY: 1.5,\n              backgroundColor: \"#367AFF\",\n              borderRadius: \"10px\"\n            },\n            children: \"Sign up\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 633,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            align: \"center\",\n            variant: \"body2\",\n            sx: {\n              cursor: \"pointer\"\n            },\n            onClick: handleToggleLoginMethod,\n            children: \"Already have an account? Sign in\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 646,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 575,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 537,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 514,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 504,\n    columnNumber: 5\n  }, this);\n};\n_s(Login, \"w4CEXryjP3hhayP4HERVZydDqWU=\", false, function () {\n  return [useMediaQuery, useFormik];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","Container","Grid","Typography","Box","TextField","Button","useMediaQuery","useFormik","Yup","api","jsxDEV","_jsxDEV","Login","_s","useOtp","setUseOtp","otpSent","setOtpSent","showPassword","setShowPassword","isMobile","handleToggleLoginMethod","handleSendOtp","email","post","alert","error","_error$response","_error$response$data","response","data","message","validationSchema","object","string","required","otp","password","formik","initialValues","onSubmit","values","localStorage","setItem","token","window","location","href","_error$response2","_error$response2$data","maxWidth","sx","height","display","alignItems","justifyContent","padding","children","container","spacing","boxShadow","borderRadius","overflow","item","xs","md","backgroundImage","backgroundSize","backgroundPosition","fileName","_jsxFileName","lineNumber","columnNumber","flexDirection","marginBottom","src","alt","style","width","marginRight","variant","fontWeight","color","fontFeatureSettings","fontFamily","fontSize","letterSpacing","component","noValidate","handleSubmit","gutterBottom","align","mb","label","name","fullWidth","margin","value","onChange","handleChange","touched","errors","helperText","type","marginY","paddingY","backgroundColor","cursor","onClick","_c","$RefreshReg$"],"sources":["D:/Study/Code/Self-Projects/NoteApp/note-taking-frontend/src/components/Auth/Login.tsx"],"sourcesContent":["// import React, { useState } from \"react\";\r\n// import {\r\n//   Container,\r\n//   Grid,\r\n//   Typography,\r\n//   Box,\r\n//   TextField,\r\n//   Button,\r\n//   InputAdornment,\r\n//   IconButton,\r\n// } from \"@mui/material\";\r\n// import { Visibility, VisibilityOff } from \"@mui/icons-material\";\r\n// import { Formik, Form, Field } from \"formik\";\r\n// import * as Yup from \"yup\";\r\n// import api from \"../../services/api\";\r\n\r\n// const Login: React.FC = () => {\r\n//   const [showPassword, setShowPassword] = useState(false);\r\n//   const [loginWithOtp, setLoginWithOtp] = useState(false);\r\n\r\n//   const initialValues = loginWithOtp\r\n//     ? { email: \"\", otp: \"\" }\r\n//     : { email: \"\", password: \"\" };\r\n\r\n//   const validationSchema = Yup.object(\r\n//     loginWithOtp\r\n//       ? {\r\n//           email: Yup.string().email(\"Invalid email\").required(\"Required\"),\r\n//           otp: Yup.string().required(\"OTP is required\"),\r\n//         }\r\n//       : {\r\n//           email: Yup.string().email(\"Invalid email\").required(\"Required\"),\r\n//           password: Yup.string().required(\"Password is required\"),\r\n//         }\r\n//   );\r\n\r\n//   const handleSubmit = async (values: typeof initialValues) => {\r\n//     try {\r\n//       if (loginWithOtp) {\r\n//         const response = await api.post(\"/auth/verify-otp\", {\r\n//           email: values.email,\r\n//           otp: values.otp,\r\n//         });\r\n//         alert(response.data.message);\r\n//       } else {\r\n//         const response = await api.post(\"/auth/login\", {\r\n//           email: values.email,\r\n//           password: values.password,\r\n//         });\r\n//         localStorage.setItem(\"token\", response.data.token);\r\n//         window.location.href = \"/notes\";\r\n//       }\r\n//     } catch (error: any) {\r\n//       alert(error.response?.data?.message || \"Login failed\");\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <Container\r\n//       maxWidth={false}\r\n//       sx={{\r\n//         height: \"100vh\",\r\n//         display: \"flex\",\r\n//         alignItems: \"center\",\r\n//         justifyContent: \"center\",\r\n//       }}\r\n//     >\r\n//       <Grid\r\n//         container\r\n//         spacing={2}\r\n//         sx={{\r\n//           height: \"100%\",\r\n//           boxShadow: 3,\r\n//           borderRadius: 3,\r\n//           overflow: \"hidden\",\r\n//         }}\r\n//       >\r\n//         {/* Left Side - Image */}\r\n//         <Grid\r\n//           item\r\n//           xs={12}\r\n//           md={6}\r\n//           sx={{\r\n//             backgroundImage: \"url('/assets/images/signup-bg.png')\",\r\n//             backgroundSize: \"cover\",\r\n//             backgroundPosition: \"center\",\r\n//           }}\r\n//         ></Grid>\r\n\r\n//         {/* Right Side - Login Form */}\r\n//         <Grid item xs={12} md={6} sx={{ padding: 4 }}>\r\n//           <Box sx={{ padding: 8 }}>\r\n//             <Typography variant=\"h4\" fontWeight=\"bold\" gutterBottom>\r\n//               Login\r\n//             </Typography>\r\n//             <Typography variant=\"body1\" color=\"text.secondary\" mb={4}>\r\n//               Login to continue to HD\r\n//             </Typography>\r\n\r\n//             <Formik\r\n//               initialValues={initialValues}\r\n//               validationSchema={validationSchema}\r\n//               onSubmit={handleSubmit}\r\n//             >\r\n//               {({ errors, touched }) => (\r\n//                 <Form>\r\n//                   <Field\r\n//                     name=\"email\"\r\n//                     as={TextField}\r\n//                     label=\"Email\"\r\n//                     fullWidth\r\n//                     margin=\"normal\"\r\n//                     variant=\"outlined\"\r\n//                     error={touched.email && !!errors.email}\r\n//                     helperText={touched.email && errors.email}\r\n//                   />\r\n\r\n//                   {loginWithOtp ? (\r\n//                     <Field\r\n//                       name=\"otp\"\r\n//                       as={TextField}\r\n//                       label=\"OTP\"\r\n//                       fullWidth\r\n//                       margin=\"normal\"\r\n//                       variant=\"outlined\"\r\n//                       error={touched.otp && !!errors.otp}\r\n//                       helperText={touched.otp && errors.otp}\r\n//                     />\r\n//                   ) : (\r\n//                     <Field\r\n//                       name=\"password\"\r\n//                       as={TextField}\r\n//                       label=\"Password\"\r\n//                       type={showPassword ? \"text\" : \"password\"}\r\n//                       fullWidth\r\n//                       margin=\"normal\"\r\n//                       variant=\"outlined\"\r\n//                       error={touched.password && !!errors.password}\r\n//                       helperText={touched.password && errors.password}\r\n//                       InputProps={{\r\n//                         endAdornment: (\r\n//                           <InputAdornment position=\"end\">\r\n//                             <IconButton\r\n//                               onClick={() => setShowPassword(!showPassword)}\r\n//                             >\r\n//                               {showPassword ? <VisibilityOff /> : <Visibility />}\r\n//                             </IconButton>\r\n//                           </InputAdornment>\r\n//                         ),\r\n//                       }}\r\n//                     />\r\n//                   )}\r\n\r\n//                   <Button\r\n//                     type=\"submit\"\r\n//                     variant=\"contained\"\r\n//                     fullWidth\r\n//                     sx={{ marginY: 2, paddingY: 1.5, backgroundColor: \"#367AFF\" }}\r\n//                   >\r\n//                     {loginWithOtp ? \"Login with OTP\" : \"Login\"}\r\n//                   </Button>\r\n\r\n//                   <Typography\r\n//                     variant=\"body2\"\r\n//                     align=\"center\"\r\n//                     sx={{ cursor: \"pointer\", color: \"#367AFF\" }}\r\n//                     onClick={() => setLoginWithOtp(!loginWithOtp)}\r\n//                   >\r\n//                     {loginWithOtp\r\n//                       ? \"Login with Password instead\"\r\n//                       : \"Login with OTP instead\"}\r\n//                   </Typography>\r\n//                 </Form>\r\n//               )}\r\n//             </Formik>\r\n//           </Box>\r\n//         </Grid>\r\n//       </Grid>\r\n//     </Container>\r\n//   );\r\n// };\r\n\r\n// export default Login;\r\n\r\n\r\n\r\n// import React, { useState } from \"react\";\r\n// import {\r\n//   Container,\r\n//   Grid,\r\n//   Typography,\r\n//   Box,\r\n//   TextField,\r\n//   InputAdornment,\r\n//   IconButton,\r\n//   Button,\r\n// } from \"@mui/material\";\r\n// import { Visibility, VisibilityOff } from \"@mui/icons-material\";\r\n// import { useFormik } from \"formik\";\r\n// import * as Yup from \"yup\";\r\n// import api from \"../../services/api\";\r\n\r\n// const Login: React.FC = () => {\r\n//   const [useOtp, setUseOtp] = useState(false); // Toggle between OTP and password login\r\n//   const [otpSent, setOtpSent] = useState(false); // Track OTP sent status\r\n//   const [showPassword, setShowPassword] = useState(false);\r\n\r\n//   const handleToggleLoginMethod = () => {\r\n//     setUseOtp(!useOtp);\r\n//     setOtpSent(false); // Reset OTP sent status when switching methods\r\n//   };\r\n\r\n//   const handleSendOtp = async (email: string) => {\r\n//     try {\r\n//       await api.post(\"/auth/send-otp\", { email });\r\n//       alert(\"OTP sent successfully to your email\");\r\n//       setOtpSent(true);\r\n//     } catch (error: any) {\r\n//       alert(error.response?.data?.message || \"Failed to send OTP\");\r\n//     }\r\n//   };\r\n\r\n//   const validationSchema = Yup.object({\r\n//     email: Yup.string().email(\"Invalid email\").required(\"Email is required\"),\r\n//     ...(useOtp\r\n//       ? { otp: Yup.string().required(\"OTP is required\") }\r\n//       : { password: Yup.string().required(\"Password is required\") }),\r\n//   });\r\n\r\n//   const formik = useFormik({\r\n//     initialValues: { email: \"\", password: \"\", otp: \"\" },\r\n//     validationSchema,\r\n//     onSubmit: async (values) => {\r\n//       try {\r\n//         if (useOtp) {\r\n//           // Login with OTP\r\n//           const response = await api.post(\"/auth/verify-otp\", {\r\n//             email: values.email,\r\n//             otp: values.otp,\r\n//           });\r\n//           localStorage.setItem(\"token\", response.data.token); // Save the token\r\n//         } else {\r\n//           // Login with password\r\n//           const response = await api.post(\"/auth/login\", {\r\n//             email: values.email,\r\n//             password: values.password,\r\n//           });\r\n//           localStorage.setItem(\"token\", response.data.token); // Save the token\r\n//         }\r\n//         window.location.href = \"/notes\"; // Redirect to notes page\r\n//       } catch (error: any) {\r\n//         alert(error.response?.data?.message || \"Login failed\");\r\n//       }\r\n//     },\r\n    \r\n//   });\r\n  \r\n\r\n//   return (\r\n//     <Container\r\n//       maxWidth={false}\r\n//       sx={{\r\n//         height: \"100vh\",\r\n//         display: \"flex\",\r\n//         alignItems: \"center\",\r\n//         justifyContent: \"center\",\r\n//       }}\r\n//     >\r\n//       <Grid\r\n//         container\r\n//         spacing={2}\r\n//         sx={{\r\n//           height: \"100%\",\r\n//           boxShadow: 3,\r\n//           borderRadius: 3,\r\n//           overflow: \"hidden\",\r\n//         }}\r\n//       >\r\n//         {/* Left Side - Image */}\r\n//         <Grid\r\n//           item\r\n//           xs={12}\r\n//           md={7}\r\n//           sx={{\r\n//             backgroundImage: \"url('/assets/images/signup-bg.png')\",\r\n//             backgroundSize: \"cover\",\r\n//             backgroundPosition: \"center\",\r\n//           }}\r\n//         ></Grid>\r\n\r\n//         {/* Right Side - Login Form */}\r\n//         <Grid item xs={12} md={5} sx={{ padding: 4 }}>\r\n//           <Box sx={{ display: \"flex\", alignItems: \"center\", marginBottom: 3 }}>\r\n//                       <img\r\n//                         src=\"/assets/images/hd-icon.png\"\r\n//                         alt=\"HD Icon\"\r\n//                         style={{ width: 32, height: 32, marginRight: 8 }}\r\n//                       />\r\n//                       <Typography\r\n//                         variant=\"h6\"\r\n//                         fontWeight=\"bold\"\r\n//                         sx={{\r\n//                           color: \"#232323\",\r\n//                           fontFeatureSettings: \"'liga' off, 'clig' off\",\r\n//                           fontFamily: \"Inter\",\r\n//                           fontSize: \"24px\",\r\n//                           fontStyle: \"normal\",\r\n//                           fontWeight: 600,\r\n//                           lineHeight: \"110%\",\r\n//                           letterSpacing: \"-0.96px\",\r\n//                         }}\r\n//                       >\r\n//                         HD\r\n//                       </Typography>\r\n//                     </Box>\r\n//           <Box component=\"form\" noValidate onSubmit={formik.handleSubmit} sx={{ paddingLeft: 9, paddingRight: 9 }}>\r\n//           <Typography variant=\"h4\" fontWeight=\"bold\" gutterBottom>\r\n//             Login\r\n//           </Typography>\r\n//           <Typography variant=\"body1\" color=\"text.secondary\" mb={4}>\r\n//             Login to access your account\r\n//           </Typography>\r\n//             <TextField\r\n//               label=\"Email\"\r\n//               name=\"email\"\r\n//               fullWidth\r\n//               margin=\"normal\"\r\n//               variant=\"outlined\"\r\n//               value={formik.values.email}\r\n//               onChange={formik.handleChange}\r\n//               error={formik.touched.email && !!formik.errors.email}\r\n//               helperText={formik.touched.email && formik.errors.email}\r\n//             />\r\n//             {useOtp ? (\r\n//               otpSent ? (\r\n//                 <TextField\r\n//                   label=\"OTP\"\r\n//                   name=\"otp\"\r\n//                   fullWidth\r\n//                   margin=\"normal\"\r\n//                   variant=\"outlined\"\r\n//                   value={formik.values.otp}\r\n//                   onChange={formik.handleChange}\r\n//                   error={formik.touched.otp && !!formik.errors.otp}\r\n//                   helperText={formik.touched.otp && formik.errors.otp}\r\n//                 />\r\n//               ) : (\r\n//                 <Button\r\n//                   variant=\"contained\"\r\n//                   fullWidth\r\n//                   sx={{ marginY: 2, paddingY: 1.5 }}\r\n//                   onClick={() => handleSendOtp(formik.values.email)}\r\n//                   disabled={!formik.values.email || !!formik.errors.email}\r\n//                 >\r\n//                   Send OTP\r\n//                 </Button>\r\n//               )\r\n//             ) : (\r\n//               <TextField\r\n//                 label=\"Password\"\r\n//                 name=\"password\"\r\n//                 fullWidth\r\n//                 margin=\"normal\"\r\n//                 variant=\"outlined\"\r\n//                 type={showPassword ? \"text\" : \"password\"}\r\n//                 value={formik.values.password}\r\n//                 onChange={formik.handleChange}\r\n//                 error={formik.touched.password && !!formik.errors.password}\r\n//                 helperText={formik.touched.password && formik.errors.password}\r\n//                 InputProps={{\r\n//                   endAdornment: (\r\n//                     <InputAdornment position=\"end\">\r\n//                       <IconButton onClick={() => setShowPassword(!showPassword)}>\r\n//                         {showPassword ? <VisibilityOff /> : <Visibility />}\r\n//                       </IconButton>\r\n//                     </InputAdornment>\r\n//                   ),\r\n//                 }}\r\n//               />\r\n//             )}\r\n//             {otpSent || !useOtp ? (\r\n//               <Button\r\n//                 type=\"submit\"\r\n//                 variant=\"contained\"\r\n//                 fullWidth\r\n//                 sx={{ marginY: 2, paddingY: 1.5, backgroundColor: \"#367AFF\" , borderRadius: \"10px\"}}\r\n//               >\r\n//                 {useOtp ? \"Verify OTP\" : \"Login\"}\r\n//               </Button>\r\n//             ) : null}\r\n//           </Box>\r\n//           <Typography\r\n//             align=\"center\"\r\n//             variant=\"body2\"\r\n//             sx={{ cursor: \"pointer\" }}\r\n//             onClick={handleToggleLoginMethod}\r\n//           >\r\n//             {useOtp ? \"Login with Password\" : \"Login with OTP\"}\r\n//           </Typography>\r\n//         </Grid>\r\n//       </Grid>\r\n//     </Container>\r\n//   );\r\n// };\r\n\r\n// export default Login;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useState } from \"react\";\r\nimport {\r\n  Container,\r\n  Grid,\r\n  Typography,\r\n  Box,\r\n  TextField,\r\n  InputAdornment,\r\n  IconButton,\r\n  Button,\r\n  useMediaQuery,\r\n} from \"@mui/material\";\r\nimport { Visibility, VisibilityOff } from \"@mui/icons-material\";\r\nimport { useFormik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport api from \"../../services/api\";\r\n\r\nconst Login: React.FC = () => {\r\n  const [useOtp, setUseOtp] = useState(false);\r\n  const [otpSent, setOtpSent] = useState(false);\r\n  const [showPassword, setShowPassword] = useState(false);\r\n\r\n  const isMobile = useMediaQuery(\"(max-width:600px)\"); // For detecting mobile view\r\n\r\n  const handleToggleLoginMethod = () => {\r\n    setUseOtp(!useOtp);\r\n    setOtpSent(false);\r\n  };\r\n\r\n  const handleSendOtp = async (email: string) => {\r\n    try {\r\n      await api.post(\"/auth/send-otp\", { email });\r\n      alert(\"OTP sent successfully to your email\");\r\n      setOtpSent(true);\r\n    } catch (error: any) {\r\n      alert(error.response?.data?.message || \"Failed to send OTP\");\r\n    }\r\n  };\r\n\r\n  const validationSchema = Yup.object({\r\n    email: Yup.string().email(\"Invalid email\").required(\"Email is required\"),\r\n    ...(useOtp\r\n      ? { otp: Yup.string().required(\"OTP is required\") }\r\n      : { password: Yup.string().required(\"Password is required\") }),\r\n  });\r\n\r\n  const formik = useFormik({\r\n    initialValues: { email: \"\", password: \"\", otp: \"\" },\r\n    validationSchema,\r\n    onSubmit: async (values) => {\r\n      try {\r\n        if (useOtp) {\r\n          const response = await api.post(\"/auth/verify-otp\", {\r\n            email: values.email,\r\n            otp: values.otp,\r\n          });\r\n          localStorage.setItem(\"token\", response.data.token);\r\n        } else {\r\n          const response = await api.post(\"/auth/login\", {\r\n            email: values.email,\r\n            password: values.password,\r\n          });\r\n          localStorage.setItem(\"token\", response.data.token);\r\n        }\r\n        window.location.href = \"/notes\";\r\n      } catch (error: any) {\r\n        alert(error.response?.data?.message || \"Login failed\");\r\n      }\r\n    },\r\n  });\r\n\r\n  return (\r\n    <Container\r\n      maxWidth={false}\r\n      sx={{\r\n        height: \"100vh\",\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        padding: isMobile ? 2 : 0, // Add padding for mobile\r\n      }}\r\n    >\r\n      <Grid\r\n        container\r\n        spacing={2}\r\n        sx={{\r\n          height: isMobile ? \"auto\" : \"100%\",\r\n          boxShadow: isMobile ? \"none\" : 3,\r\n          borderRadius: isMobile ? 0 : 3,\r\n          overflow: \"hidden\",\r\n        }}\r\n      >\r\n        {!isMobile && (\r\n          <Grid\r\n            item\r\n            xs={12}\r\n            md={7}\r\n            sx={{\r\n              backgroundImage: \"url('/assets/images/signup-bg.png')\",\r\n              backgroundSize: \"cover\",\r\n              backgroundPosition: \"center\",\r\n            }}\r\n          ></Grid>\r\n        )}\r\n\r\n        <Grid\r\n          item\r\n          xs={12}\r\n          md={5}\r\n          sx={{\r\n            padding: isMobile ? 3 : 4,\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            alignItems: isMobile ? \"center\" : \"flex-start\",\r\n            justifyContent: \"center\",\r\n          }}\r\n        >\r\n          <Box sx={{ display: \"flex\", alignItems: \"center\", marginBottom: 3 }}>\r\n            <img\r\n              src=\"/assets/images/hd-icon.png\"\r\n              alt=\"HD Icon\"\r\n              style={{\r\n                width: 32,\r\n                height: 32,\r\n                marginRight: 8,\r\n                display: isMobile ? \"none\" : \"block\",\r\n              }}\r\n            />\r\n            <Typography\r\n              variant=\"h6\"\r\n              fontWeight=\"bold\"\r\n              sx={{\r\n                color: \"#232323\",\r\n                fontFeatureSettings: \"'liga' off, 'clig' off\",\r\n                fontFamily: \"Inter\",\r\n                fontSize: isMobile ? \"20px\" : \"24px\",\r\n                fontWeight: 600,\r\n                letterSpacing: \"-0.96px\",\r\n              }}\r\n            >\r\n              HD\r\n            </Typography>\r\n          </Box>\r\n          <Box\r\n            component=\"form\"\r\n            noValidate\r\n            onSubmit={formik.handleSubmit}\r\n            sx={{\r\n              width: isMobile ? \"100%\" : \"auto\",\r\n            }}\r\n          >\r\n            <Typography\r\n              variant=\"h5\"\r\n              fontWeight=\"bold\"\r\n              gutterBottom\r\n              align={isMobile ? \"center\" : \"left\"}\r\n            >\r\n              Sign up\r\n            </Typography>\r\n            <Typography\r\n              variant=\"body2\"\r\n              color=\"text.secondary\"\r\n              mb={4}\r\n              align={isMobile ? \"center\" : \"left\"}\r\n            >\r\n              Sign up to enjoy the feature of HD\r\n            </Typography>\r\n            <TextField\r\n              label=\"Your Name\"\r\n              name=\"name\"\r\n              fullWidth\r\n              margin=\"normal\"\r\n              variant=\"outlined\"\r\n            />\r\n            <TextField\r\n              label=\"Date of Birth\"\r\n              name=\"dob\"\r\n              fullWidth\r\n              margin=\"normal\"\r\n              variant=\"outlined\"\r\n            />\r\n            <TextField\r\n              label=\"Email\"\r\n              name=\"email\"\r\n              fullWidth\r\n              margin=\"normal\"\r\n              variant=\"outlined\"\r\n              value={formik.values.email}\r\n              onChange={formik.handleChange}\r\n              error={formik.touched.email && !!formik.errors.email}\r\n              helperText={formik.touched.email && formik.errors.email}\r\n            />\r\n            <TextField\r\n              label=\"OTP\"\r\n              name=\"otp\"\r\n              fullWidth\r\n              margin=\"normal\"\r\n              variant=\"outlined\"\r\n              value={formik.values.otp}\r\n              onChange={formik.handleChange}\r\n            />\r\n            <Button\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              fullWidth\r\n              sx={{\r\n                marginY: 2,\r\n                paddingY: 1.5,\r\n                backgroundColor: \"#367AFF\",\r\n                borderRadius: \"10px\",\r\n              }}\r\n            >\r\n              Sign up\r\n            </Button>\r\n            <Typography\r\n              align=\"center\"\r\n              variant=\"body2\"\r\n              sx={{ cursor: \"pointer\" }}\r\n              onClick={handleToggleLoginMethod}\r\n            >\r\n              Already have an account? Sign in\r\n            </Typography>\r\n          </Box>\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}